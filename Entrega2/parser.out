Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    RESERVED

Grammar

Rule 0     S' -> program
Rule 1     program -> INST_PROGRAM Bloque_Inst
Rule 2     program -> INST_PROGRAM Inst
Rule 3     Bloque_Inst -> INST_BEGIN Lista_Inst INST_END
Rule 4     Bloque_Inst -> INST_BEGIN Inst_Declare Lista_Inst INST_END
Rule 5     Bloque_Inst -> INST_BEGIN Inst_Declare INST_END
Rule 6     Lista_Inst -> Inst
Rule 7     Lista_Inst -> Inst SEMICOLON Lista_Inst
Rule 8     Inst -> Inst_Asignacion
Rule 9     Inst -> Inst_Lectura
Rule 10    Inst -> Inst_For
Rule 11    Inst -> Inst_While
Rule 12    Inst -> Inst_If
Rule 13    Inst -> Inst_Case
Rule 14    Inst -> Inst_Salida
Rule 15    Inst -> Inst_Funcion
Rule 16    Inst -> Bloque_Inst
Rule 17    Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN
Rule 18    Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN
Rule 19    Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN
Rule 20    Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN
Rule 21    Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN
Rule 22    Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN
Rule 23    Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN
Rule 24    Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN
Rule 25    Inst_Declare -> INST_DECLARE Lista_DeclareTipos
Rule 26    Lista_DeclareTipos -> Lista_Declare
Rule 27    Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos
Rule 28    Lista_Declare -> Lista_Variables INST_AS Tipo
Rule 29    Lista_Variables -> VAR_IDENTIFIER
Rule 30    Lista_Variables -> VAR_IDENTIFIER COMMA Lista_Variables
Rule 31    Tipo -> TYPEDEF_INT
Rule 32    Tipo -> TYPEDEF_BOOL
Rule 33    Tipo -> TYPEDEF_RANGE
Rule 34    Inst_Asignacion -> VAR_IDENTIFIER EQUAL Expresion
Rule 35    Expresion -> Operacion_binaria
Rule 36    Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria
Rule 37    Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria
Rule 38    Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria
Rule 39    Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria
Rule 40    Operacion_binaria -> Operacion_binaria MOD Operacion_binaria
Rule 41    Operacion_binaria -> Operacion_binaria AND Operacion_binaria
Rule 42    Operacion_binaria -> Operacion_binaria OR Operacion_binaria
Rule 43    Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria
Rule 44    Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria
Rule 45    Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria
Rule 46    Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria
Rule 47    Operacion_binaria -> Operacion_binaria LESS Operacion_binaria
Rule 48    Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria
Rule 49    Operacion_binaria -> Operacion_binaria IN Operacion_binaria
Rule 50    Operacion_binaria -> NOT Operacion_binaria
Rule 51    Operacion_binaria -> NUMBER
Rule 52    Operacion_binaria -> VAR_IDENTIFIER
Rule 53    Operacion_binaria -> LPAREN Operacion_binaria RPAREN
Rule 54    Operacion_binaria -> Inst_Funcion
Rule 55    Operacion_binaria -> MINUS Operacion_binaria
Rule 56    Operacion_binaria -> TRUE
Rule 57    Operacion_binaria -> FALSE
Rule 58    Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria
Rule 59    Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria
Rule 60    Inst_Lectura -> INST_READ VAR_IDENTIFIER
Rule 61    Inst_Salida -> INST_WRITE Lista_Aux
Rule 62    Inst_Salida -> INST_WRITELN Lista_Aux
Rule 63    Lista_Aux -> Expresion
Rule 64    Lista_Aux -> STRING
Rule 65    Lista_Aux -> Expresion COMMA Lista_Aux
Rule 66    Lista_Aux -> STRING COMMA Lista_Aux
Rule 67    Bloque_Control -> Inst
Rule 68    Bloque_Control -> Bloque_Inst
Rule 69    Inst_If -> INST_IF Expresion INST_THEN Bloque_Control
Rule 70    Inst_If -> INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
Rule 71    Inst_Case -> INST_CASE Operacion_binaria INST_OF Casos INST_END
Rule 72    Casos -> VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON
Rule 73    Casos -> Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON
Rule 74    Casos -> VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON Casos
Rule 75    Casos -> Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON Casos
Rule 76    Inst_For -> INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
Rule 77    Inst_While -> INST_WHILE Expresion INST_DO Bloque_Inst
Rule 78    Inst_While -> INST_WHILE Expresion INST_DO Inst

Terminals, with rules where they appear

AND                  : 41
BOTTOM               : 20 24
CASE_ASSIGN          : 72 73 74 75
COMMA                : 30 65 66
COMMENT              : 
DIVIDE               : 39
EQEQ                 : 43
EQUAL                : 34
FALSE                : 57
GREAT                : 45
GREATEQ              : 46
IN                   : 49
INST_AS              : 28
INST_BEGIN           : 3 4 5
INST_CASE            : 71
INST_DECLARE         : 25
INST_DO              : 76 77 78
INST_ELSE            : 70
INST_END             : 3 4 5 71
INST_FOR             : 76
INST_IF              : 69 70
INST_IN              : 76
INST_OF              : 71
INST_PROGRAM         : 1 2
INST_READ            : 60
INST_THEN            : 69 70
INST_WHILE           : 77 78
INST_WRITE           : 61
INST_WRITELN         : 62
INTERSECTION         : 59
LENGTH               : 18 22
LESS                 : 47
LESSEQ               : 48
LPAREN               : 17 18 19 20 21 22 23 24 53
MINUS                : 37 55
MOD                  : 40
NEQEQ                : 44
NOT                  : 50
NUMBER               : 51
OR                   : 42
PLUS                 : 36
RANGE                : 58
RESERVED             : 
RPAREN               : 17 18 19 20 21 22 23 24 53
RTOI                 : 17 21
SEMICOLON            : 7 27 72 73 74 75
STRING               : 64 66
TIMES                : 38
TOP                  : 19 23
TRUE                 : 56
TYPEDEF_BOOL         : 32
TYPEDEF_INT          : 31
TYPEDEF_RANGE        : 33
VAR_IDENTIFIER       : 21 22 23 24 29 30 34 52 60 72 74 76
error                : 

Nonterminals, with rules where they appear

Bloque_Control       : 69 70 70 72 73 74 75 76
Bloque_Inst          : 1 16 68 77
Casos                : 71 74 75
Expresion            : 34 63 65 69 70 77 78
Inst                 : 2 6 7 67 78
Inst_Asignacion      : 8
Inst_Case            : 13
Inst_Declare         : 4 5
Inst_For             : 10
Inst_Funcion         : 15 54
Inst_If              : 12
Inst_Lectura         : 9
Inst_Salida          : 14
Inst_While           : 11
Lista_Aux            : 61 62 65 66
Lista_Declare        : 26 27
Lista_DeclareTipos   : 25 27
Lista_Inst           : 3 4 7
Lista_Variables      : 28 30
Operacion_binaria    : 17 18 19 20 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 53 55 58 58 59 59 71 73 75 76
Tipo                 : 28
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . INST_PROGRAM Bloque_Inst
    (2) program -> . INST_PROGRAM Inst

    INST_PROGRAM    shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> INST_PROGRAM . Bloque_Inst
    (2) program -> INST_PROGRAM . Inst
    (3) Bloque_Inst -> . INST_BEGIN Lista_Inst INST_END
    (4) Bloque_Inst -> . INST_BEGIN Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> . INST_BEGIN Inst_Declare INST_END
    (8) Inst -> . Inst_Asignacion
    (9) Inst -> . Inst_Lectura
    (10) Inst -> . Inst_For
    (11) Inst -> . Inst_While
    (12) Inst -> . Inst_If
    (13) Inst -> . Inst_Case
    (14) Inst -> . Inst_Salida
    (15) Inst -> . Inst_Funcion
    (16) Inst -> . Bloque_Inst
    (34) Inst_Asignacion -> . VAR_IDENTIFIER EQUAL Expresion
    (60) Inst_Lectura -> . INST_READ VAR_IDENTIFIER
    (76) Inst_For -> . INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
    (77) Inst_While -> . INST_WHILE Expresion INST_DO Bloque_Inst
    (78) Inst_While -> . INST_WHILE Expresion INST_DO Inst
    (69) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control
    (70) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (71) Inst_Case -> . INST_CASE Operacion_binaria INST_OF Casos INST_END
    (61) Inst_Salida -> . INST_WRITE Lista_Aux
    (62) Inst_Salida -> . INST_WRITELN Lista_Aux
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    INST_BEGIN      shift and go to state 10
    VAR_IDENTIFIER  shift and go to state 16
    INST_READ       shift and go to state 9
    INST_FOR        shift and go to state 19
    INST_WHILE      shift and go to state 8
    INST_IF         shift and go to state 20
    INST_CASE       shift and go to state 18
    INST_WRITE      shift and go to state 4
    INST_WRITELN    shift and go to state 21
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Inst_Salida                    shift and go to state 7
    Inst_Funcion                   shift and go to state 3
    Bloque_Inst                    shift and go to state 6
    Inst_If                        shift and go to state 17
    Inst_For                       shift and go to state 12
    Inst_While                     shift and go to state 14
    Inst                           shift and go to state 13
    Inst_Asignacion                shift and go to state 24
    Inst_Case                      shift and go to state 25
    Inst_Lectura                   shift and go to state 15

state 3

    (15) Inst -> Inst_Funcion .

    SEMICOLON       reduce using rule 15 (Inst -> Inst_Funcion .)
    $end            reduce using rule 15 (Inst -> Inst_Funcion .)
    INST_END        reduce using rule 15 (Inst -> Inst_Funcion .)
    INST_ELSE       reduce using rule 15 (Inst -> Inst_Funcion .)


state 4

    (61) Inst_Salida -> INST_WRITE . Lista_Aux
    (63) Lista_Aux -> . Expresion
    (64) Lista_Aux -> . STRING
    (65) Lista_Aux -> . Expresion COMMA Lista_Aux
    (66) Lista_Aux -> . STRING COMMA Lista_Aux
    (35) Expresion -> . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    STRING          shift and go to state 32
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Expresion                      shift and go to state 31
    Operacion_binaria              shift and go to state 35
    Inst_Funcion                   shift and go to state 26
    Lista_Aux                      shift and go to state 28

state 5

    (19) Inst_Funcion -> TOP . LPAREN Operacion_binaria RPAREN
    (23) Inst_Funcion -> TOP . LPAREN VAR_IDENTIFIER RPAREN

    LPAREN          shift and go to state 38


state 6

    (1) program -> INST_PROGRAM Bloque_Inst .
    (16) Inst -> Bloque_Inst .

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> INST_PROGRAM Bloque_Inst .)
    $end            reduce using rule 1 (program -> INST_PROGRAM Bloque_Inst .)

  ! $end            [ reduce using rule 16 (Inst -> Bloque_Inst .) ]


state 7

    (14) Inst -> Inst_Salida .

    SEMICOLON       reduce using rule 14 (Inst -> Inst_Salida .)
    $end            reduce using rule 14 (Inst -> Inst_Salida .)
    INST_END        reduce using rule 14 (Inst -> Inst_Salida .)
    INST_ELSE       reduce using rule 14 (Inst -> Inst_Salida .)


state 8

    (77) Inst_While -> INST_WHILE . Expresion INST_DO Bloque_Inst
    (78) Inst_While -> INST_WHILE . Expresion INST_DO Inst
    (35) Expresion -> . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Expresion                      shift and go to state 39
    Operacion_binaria              shift and go to state 35
    Inst_Funcion                   shift and go to state 26

state 9

    (60) Inst_Lectura -> INST_READ . VAR_IDENTIFIER

    VAR_IDENTIFIER  shift and go to state 40


state 10

    (3) Bloque_Inst -> INST_BEGIN . Lista_Inst INST_END
    (4) Bloque_Inst -> INST_BEGIN . Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> INST_BEGIN . Inst_Declare INST_END
    (6) Lista_Inst -> . Inst
    (7) Lista_Inst -> . Inst SEMICOLON Lista_Inst
    (25) Inst_Declare -> . INST_DECLARE Lista_DeclareTipos
    (8) Inst -> . Inst_Asignacion
    (9) Inst -> . Inst_Lectura
    (10) Inst -> . Inst_For
    (11) Inst -> . Inst_While
    (12) Inst -> . Inst_If
    (13) Inst -> . Inst_Case
    (14) Inst -> . Inst_Salida
    (15) Inst -> . Inst_Funcion
    (16) Inst -> . Bloque_Inst
    (34) Inst_Asignacion -> . VAR_IDENTIFIER EQUAL Expresion
    (60) Inst_Lectura -> . INST_READ VAR_IDENTIFIER
    (76) Inst_For -> . INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
    (77) Inst_While -> . INST_WHILE Expresion INST_DO Bloque_Inst
    (78) Inst_While -> . INST_WHILE Expresion INST_DO Inst
    (69) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control
    (70) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (71) Inst_Case -> . INST_CASE Operacion_binaria INST_OF Casos INST_END
    (61) Inst_Salida -> . INST_WRITE Lista_Aux
    (62) Inst_Salida -> . INST_WRITELN Lista_Aux
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN
    (3) Bloque_Inst -> . INST_BEGIN Lista_Inst INST_END
    (4) Bloque_Inst -> . INST_BEGIN Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> . INST_BEGIN Inst_Declare INST_END

    INST_DECLARE    shift and go to state 41
    VAR_IDENTIFIER  shift and go to state 16
    INST_READ       shift and go to state 9
    INST_FOR        shift and go to state 19
    INST_WHILE      shift and go to state 8
    INST_IF         shift and go to state 20
    INST_CASE       shift and go to state 18
    INST_WRITE      shift and go to state 4
    INST_WRITELN    shift and go to state 21
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11
    INST_BEGIN      shift and go to state 10

    Inst_Salida                    shift and go to state 7
    Inst_Declare                   shift and go to state 43
    Inst_Funcion                   shift and go to state 3
    Bloque_Inst                    shift and go to state 42
    Inst_If                        shift and go to state 17
    Inst_For                       shift and go to state 12
    Inst_While                     shift and go to state 14
    Inst                           shift and go to state 44
    Inst_Asignacion                shift and go to state 24
    Inst_Case                      shift and go to state 25
    Inst_Lectura                   shift and go to state 15
    Lista_Inst                     shift and go to state 45

state 11

    (20) Inst_Funcion -> BOTTOM . LPAREN Operacion_binaria RPAREN
    (24) Inst_Funcion -> BOTTOM . LPAREN VAR_IDENTIFIER RPAREN

    LPAREN          shift and go to state 46


state 12

    (10) Inst -> Inst_For .

    SEMICOLON       reduce using rule 10 (Inst -> Inst_For .)
    $end            reduce using rule 10 (Inst -> Inst_For .)
    INST_END        reduce using rule 10 (Inst -> Inst_For .)
    INST_ELSE       reduce using rule 10 (Inst -> Inst_For .)


state 13

    (2) program -> INST_PROGRAM Inst .

    $end            reduce using rule 2 (program -> INST_PROGRAM Inst .)


state 14

    (11) Inst -> Inst_While .

    SEMICOLON       reduce using rule 11 (Inst -> Inst_While .)
    $end            reduce using rule 11 (Inst -> Inst_While .)
    INST_END        reduce using rule 11 (Inst -> Inst_While .)
    INST_ELSE       reduce using rule 11 (Inst -> Inst_While .)


state 15

    (9) Inst -> Inst_Lectura .

    SEMICOLON       reduce using rule 9 (Inst -> Inst_Lectura .)
    $end            reduce using rule 9 (Inst -> Inst_Lectura .)
    INST_END        reduce using rule 9 (Inst -> Inst_Lectura .)
    INST_ELSE       reduce using rule 9 (Inst -> Inst_Lectura .)


state 16

    (34) Inst_Asignacion -> VAR_IDENTIFIER . EQUAL Expresion

    EQUAL           shift and go to state 47


state 17

    (12) Inst -> Inst_If .

    SEMICOLON       reduce using rule 12 (Inst -> Inst_If .)
    $end            reduce using rule 12 (Inst -> Inst_If .)
    INST_END        reduce using rule 12 (Inst -> Inst_If .)
    INST_ELSE       reduce using rule 12 (Inst -> Inst_If .)


state 18

    (71) Inst_Case -> INST_CASE . Operacion_binaria INST_OF Casos INST_END
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 48
    Inst_Funcion                   shift and go to state 26

state 19

    (76) Inst_For -> INST_FOR . VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control

    VAR_IDENTIFIER  shift and go to state 49


state 20

    (69) Inst_If -> INST_IF . Expresion INST_THEN Bloque_Control
    (70) Inst_If -> INST_IF . Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (35) Expresion -> . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Expresion                      shift and go to state 50
    Operacion_binaria              shift and go to state 35
    Inst_Funcion                   shift and go to state 26

state 21

    (62) Inst_Salida -> INST_WRITELN . Lista_Aux
    (63) Lista_Aux -> . Expresion
    (64) Lista_Aux -> . STRING
    (65) Lista_Aux -> . Expresion COMMA Lista_Aux
    (66) Lista_Aux -> . STRING COMMA Lista_Aux
    (35) Expresion -> . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    STRING          shift and go to state 32
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Expresion                      shift and go to state 31
    Operacion_binaria              shift and go to state 35
    Inst_Funcion                   shift and go to state 26
    Lista_Aux                      shift and go to state 51

state 22

    (18) Inst_Funcion -> LENGTH . LPAREN Operacion_binaria RPAREN
    (22) Inst_Funcion -> LENGTH . LPAREN VAR_IDENTIFIER RPAREN

    LPAREN          shift and go to state 52


state 23

    (17) Inst_Funcion -> RTOI . LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> RTOI . LPAREN VAR_IDENTIFIER RPAREN

    LPAREN          shift and go to state 53


state 24

    (8) Inst -> Inst_Asignacion .

    SEMICOLON       reduce using rule 8 (Inst -> Inst_Asignacion .)
    $end            reduce using rule 8 (Inst -> Inst_Asignacion .)
    INST_END        reduce using rule 8 (Inst -> Inst_Asignacion .)
    INST_ELSE       reduce using rule 8 (Inst -> Inst_Asignacion .)


state 25

    (13) Inst -> Inst_Case .

    SEMICOLON       reduce using rule 13 (Inst -> Inst_Case .)
    $end            reduce using rule 13 (Inst -> Inst_Case .)
    INST_END        reduce using rule 13 (Inst -> Inst_Case .)
    INST_ELSE       reduce using rule 13 (Inst -> Inst_Case .)


state 26

    (54) Operacion_binaria -> Inst_Funcion .

    PLUS            reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    MINUS           reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    TIMES           reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    DIVIDE          reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    MOD             reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    AND             reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    OR              reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    EQEQ            reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    NEQEQ           reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    GREAT           reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    GREATEQ         reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    LESS            reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    LESSEQ          reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    IN              reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    RANGE           reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    INTERSECTION    reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    COMMA           reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    $end            reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    SEMICOLON       reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    INST_END        reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    INST_ELSE       reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    INST_DO         reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    INST_OF         reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    INST_THEN       reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    RPAREN          reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)
    CASE_ASSIGN     reduce using rule 54 (Operacion_binaria -> Inst_Funcion .)


state 27

    (51) Operacion_binaria -> NUMBER .

    PLUS            reduce using rule 51 (Operacion_binaria -> NUMBER .)
    MINUS           reduce using rule 51 (Operacion_binaria -> NUMBER .)
    TIMES           reduce using rule 51 (Operacion_binaria -> NUMBER .)
    DIVIDE          reduce using rule 51 (Operacion_binaria -> NUMBER .)
    MOD             reduce using rule 51 (Operacion_binaria -> NUMBER .)
    AND             reduce using rule 51 (Operacion_binaria -> NUMBER .)
    OR              reduce using rule 51 (Operacion_binaria -> NUMBER .)
    EQEQ            reduce using rule 51 (Operacion_binaria -> NUMBER .)
    NEQEQ           reduce using rule 51 (Operacion_binaria -> NUMBER .)
    GREAT           reduce using rule 51 (Operacion_binaria -> NUMBER .)
    GREATEQ         reduce using rule 51 (Operacion_binaria -> NUMBER .)
    LESS            reduce using rule 51 (Operacion_binaria -> NUMBER .)
    LESSEQ          reduce using rule 51 (Operacion_binaria -> NUMBER .)
    IN              reduce using rule 51 (Operacion_binaria -> NUMBER .)
    RANGE           reduce using rule 51 (Operacion_binaria -> NUMBER .)
    INTERSECTION    reduce using rule 51 (Operacion_binaria -> NUMBER .)
    COMMA           reduce using rule 51 (Operacion_binaria -> NUMBER .)
    $end            reduce using rule 51 (Operacion_binaria -> NUMBER .)
    SEMICOLON       reduce using rule 51 (Operacion_binaria -> NUMBER .)
    INST_END        reduce using rule 51 (Operacion_binaria -> NUMBER .)
    INST_ELSE       reduce using rule 51 (Operacion_binaria -> NUMBER .)
    INST_DO         reduce using rule 51 (Operacion_binaria -> NUMBER .)
    INST_OF         reduce using rule 51 (Operacion_binaria -> NUMBER .)
    INST_THEN       reduce using rule 51 (Operacion_binaria -> NUMBER .)
    RPAREN          reduce using rule 51 (Operacion_binaria -> NUMBER .)
    CASE_ASSIGN     reduce using rule 51 (Operacion_binaria -> NUMBER .)


state 28

    (61) Inst_Salida -> INST_WRITE Lista_Aux .

    SEMICOLON       reduce using rule 61 (Inst_Salida -> INST_WRITE Lista_Aux .)
    INST_END        reduce using rule 61 (Inst_Salida -> INST_WRITE Lista_Aux .)
    $end            reduce using rule 61 (Inst_Salida -> INST_WRITE Lista_Aux .)
    INST_ELSE       reduce using rule 61 (Inst_Salida -> INST_WRITE Lista_Aux .)


state 29

    (56) Operacion_binaria -> TRUE .

    PLUS            reduce using rule 56 (Operacion_binaria -> TRUE .)
    MINUS           reduce using rule 56 (Operacion_binaria -> TRUE .)
    TIMES           reduce using rule 56 (Operacion_binaria -> TRUE .)
    DIVIDE          reduce using rule 56 (Operacion_binaria -> TRUE .)
    MOD             reduce using rule 56 (Operacion_binaria -> TRUE .)
    AND             reduce using rule 56 (Operacion_binaria -> TRUE .)
    OR              reduce using rule 56 (Operacion_binaria -> TRUE .)
    EQEQ            reduce using rule 56 (Operacion_binaria -> TRUE .)
    NEQEQ           reduce using rule 56 (Operacion_binaria -> TRUE .)
    GREAT           reduce using rule 56 (Operacion_binaria -> TRUE .)
    GREATEQ         reduce using rule 56 (Operacion_binaria -> TRUE .)
    LESS            reduce using rule 56 (Operacion_binaria -> TRUE .)
    LESSEQ          reduce using rule 56 (Operacion_binaria -> TRUE .)
    IN              reduce using rule 56 (Operacion_binaria -> TRUE .)
    RANGE           reduce using rule 56 (Operacion_binaria -> TRUE .)
    INTERSECTION    reduce using rule 56 (Operacion_binaria -> TRUE .)
    COMMA           reduce using rule 56 (Operacion_binaria -> TRUE .)
    $end            reduce using rule 56 (Operacion_binaria -> TRUE .)
    SEMICOLON       reduce using rule 56 (Operacion_binaria -> TRUE .)
    INST_END        reduce using rule 56 (Operacion_binaria -> TRUE .)
    INST_ELSE       reduce using rule 56 (Operacion_binaria -> TRUE .)
    INST_DO         reduce using rule 56 (Operacion_binaria -> TRUE .)
    INST_OF         reduce using rule 56 (Operacion_binaria -> TRUE .)
    INST_THEN       reduce using rule 56 (Operacion_binaria -> TRUE .)
    RPAREN          reduce using rule 56 (Operacion_binaria -> TRUE .)
    CASE_ASSIGN     reduce using rule 56 (Operacion_binaria -> TRUE .)


state 30

    (55) Operacion_binaria -> MINUS . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 54
    Inst_Funcion                   shift and go to state 26

state 31

    (63) Lista_Aux -> Expresion .
    (65) Lista_Aux -> Expresion . COMMA Lista_Aux

    $end            reduce using rule 63 (Lista_Aux -> Expresion .)
    SEMICOLON       reduce using rule 63 (Lista_Aux -> Expresion .)
    INST_END        reduce using rule 63 (Lista_Aux -> Expresion .)
    INST_ELSE       reduce using rule 63 (Lista_Aux -> Expresion .)
    COMMA           shift and go to state 55


state 32

    (64) Lista_Aux -> STRING .
    (66) Lista_Aux -> STRING . COMMA Lista_Aux

    $end            reduce using rule 64 (Lista_Aux -> STRING .)
    SEMICOLON       reduce using rule 64 (Lista_Aux -> STRING .)
    INST_END        reduce using rule 64 (Lista_Aux -> STRING .)
    INST_ELSE       reduce using rule 64 (Lista_Aux -> STRING .)
    COMMA           shift and go to state 56


state 33

    (52) Operacion_binaria -> VAR_IDENTIFIER .

    PLUS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MINUS           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    TIMES           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    DIVIDE          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MOD             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    AND             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    OR              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    EQEQ            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    NEQEQ           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREAT           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREATEQ         reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESSEQ          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    IN              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    RANGE           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INTERSECTION    reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    COMMA           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    $end            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    SEMICOLON       reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INST_END        reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INST_ELSE       reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INST_DO         reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INST_OF         reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INST_THEN       reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    RPAREN          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    CASE_ASSIGN     reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)


state 34

    (53) Operacion_binaria -> LPAREN . Operacion_binaria RPAREN
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 57
    Inst_Funcion                   shift and go to state 26

state 35

    (35) Expresion -> Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    COMMA           reduce using rule 35 (Expresion -> Operacion_binaria .)
    $end            reduce using rule 35 (Expresion -> Operacion_binaria .)
    SEMICOLON       reduce using rule 35 (Expresion -> Operacion_binaria .)
    INST_END        reduce using rule 35 (Expresion -> Operacion_binaria .)
    INST_ELSE       reduce using rule 35 (Expresion -> Operacion_binaria .)
    INST_THEN       reduce using rule 35 (Expresion -> Operacion_binaria .)
    INST_DO         reduce using rule 35 (Expresion -> Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    AND             shift and go to state 58
    OR              shift and go to state 59
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71


state 36

    (57) Operacion_binaria -> FALSE .

    PLUS            reduce using rule 57 (Operacion_binaria -> FALSE .)
    MINUS           reduce using rule 57 (Operacion_binaria -> FALSE .)
    TIMES           reduce using rule 57 (Operacion_binaria -> FALSE .)
    DIVIDE          reduce using rule 57 (Operacion_binaria -> FALSE .)
    MOD             reduce using rule 57 (Operacion_binaria -> FALSE .)
    AND             reduce using rule 57 (Operacion_binaria -> FALSE .)
    OR              reduce using rule 57 (Operacion_binaria -> FALSE .)
    EQEQ            reduce using rule 57 (Operacion_binaria -> FALSE .)
    NEQEQ           reduce using rule 57 (Operacion_binaria -> FALSE .)
    GREAT           reduce using rule 57 (Operacion_binaria -> FALSE .)
    GREATEQ         reduce using rule 57 (Operacion_binaria -> FALSE .)
    LESS            reduce using rule 57 (Operacion_binaria -> FALSE .)
    LESSEQ          reduce using rule 57 (Operacion_binaria -> FALSE .)
    IN              reduce using rule 57 (Operacion_binaria -> FALSE .)
    RANGE           reduce using rule 57 (Operacion_binaria -> FALSE .)
    INTERSECTION    reduce using rule 57 (Operacion_binaria -> FALSE .)
    COMMA           reduce using rule 57 (Operacion_binaria -> FALSE .)
    $end            reduce using rule 57 (Operacion_binaria -> FALSE .)
    SEMICOLON       reduce using rule 57 (Operacion_binaria -> FALSE .)
    INST_END        reduce using rule 57 (Operacion_binaria -> FALSE .)
    INST_ELSE       reduce using rule 57 (Operacion_binaria -> FALSE .)
    INST_DO         reduce using rule 57 (Operacion_binaria -> FALSE .)
    INST_OF         reduce using rule 57 (Operacion_binaria -> FALSE .)
    INST_THEN       reduce using rule 57 (Operacion_binaria -> FALSE .)
    RPAREN          reduce using rule 57 (Operacion_binaria -> FALSE .)
    CASE_ASSIGN     reduce using rule 57 (Operacion_binaria -> FALSE .)


state 37

    (50) Operacion_binaria -> NOT . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 74
    Inst_Funcion                   shift and go to state 26

state 38

    (19) Inst_Funcion -> TOP LPAREN . Operacion_binaria RPAREN
    (23) Inst_Funcion -> TOP LPAREN . VAR_IDENTIFIER RPAREN
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    VAR_IDENTIFIER  shift and go to state 75
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 76
    Inst_Funcion                   shift and go to state 26

state 39

    (77) Inst_While -> INST_WHILE Expresion . INST_DO Bloque_Inst
    (78) Inst_While -> INST_WHILE Expresion . INST_DO Inst

    INST_DO         shift and go to state 77


state 40

    (60) Inst_Lectura -> INST_READ VAR_IDENTIFIER .

    $end            reduce using rule 60 (Inst_Lectura -> INST_READ VAR_IDENTIFIER .)
    SEMICOLON       reduce using rule 60 (Inst_Lectura -> INST_READ VAR_IDENTIFIER .)
    INST_END        reduce using rule 60 (Inst_Lectura -> INST_READ VAR_IDENTIFIER .)
    INST_ELSE       reduce using rule 60 (Inst_Lectura -> INST_READ VAR_IDENTIFIER .)


state 41

    (25) Inst_Declare -> INST_DECLARE . Lista_DeclareTipos
    (26) Lista_DeclareTipos -> . Lista_Declare
    (27) Lista_DeclareTipos -> . Lista_Declare SEMICOLON Lista_DeclareTipos
    (28) Lista_Declare -> . Lista_Variables INST_AS Tipo
    (29) Lista_Variables -> . VAR_IDENTIFIER
    (30) Lista_Variables -> . VAR_IDENTIFIER COMMA Lista_Variables

    VAR_IDENTIFIER  shift and go to state 78

    Lista_Variables                shift and go to state 80
    Lista_Declare                  shift and go to state 81
    Lista_DeclareTipos             shift and go to state 79

state 42

    (16) Inst -> Bloque_Inst .

    SEMICOLON       reduce using rule 16 (Inst -> Bloque_Inst .)
    INST_END        reduce using rule 16 (Inst -> Bloque_Inst .)


state 43

    (4) Bloque_Inst -> INST_BEGIN Inst_Declare . Lista_Inst INST_END
    (5) Bloque_Inst -> INST_BEGIN Inst_Declare . INST_END
    (6) Lista_Inst -> . Inst
    (7) Lista_Inst -> . Inst SEMICOLON Lista_Inst
    (8) Inst -> . Inst_Asignacion
    (9) Inst -> . Inst_Lectura
    (10) Inst -> . Inst_For
    (11) Inst -> . Inst_While
    (12) Inst -> . Inst_If
    (13) Inst -> . Inst_Case
    (14) Inst -> . Inst_Salida
    (15) Inst -> . Inst_Funcion
    (16) Inst -> . Bloque_Inst
    (34) Inst_Asignacion -> . VAR_IDENTIFIER EQUAL Expresion
    (60) Inst_Lectura -> . INST_READ VAR_IDENTIFIER
    (76) Inst_For -> . INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
    (77) Inst_While -> . INST_WHILE Expresion INST_DO Bloque_Inst
    (78) Inst_While -> . INST_WHILE Expresion INST_DO Inst
    (69) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control
    (70) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (71) Inst_Case -> . INST_CASE Operacion_binaria INST_OF Casos INST_END
    (61) Inst_Salida -> . INST_WRITE Lista_Aux
    (62) Inst_Salida -> . INST_WRITELN Lista_Aux
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN
    (3) Bloque_Inst -> . INST_BEGIN Lista_Inst INST_END
    (4) Bloque_Inst -> . INST_BEGIN Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> . INST_BEGIN Inst_Declare INST_END

    INST_END        shift and go to state 82
    VAR_IDENTIFIER  shift and go to state 16
    INST_READ       shift and go to state 9
    INST_FOR        shift and go to state 19
    INST_WHILE      shift and go to state 8
    INST_IF         shift and go to state 20
    INST_CASE       shift and go to state 18
    INST_WRITE      shift and go to state 4
    INST_WRITELN    shift and go to state 21
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11
    INST_BEGIN      shift and go to state 10

    Inst_Salida                    shift and go to state 7
    Inst_Funcion                   shift and go to state 3
    Bloque_Inst                    shift and go to state 42
    Inst_If                        shift and go to state 17
    Inst_For                       shift and go to state 12
    Inst_While                     shift and go to state 14
    Inst                           shift and go to state 44
    Inst_Asignacion                shift and go to state 24
    Inst_Case                      shift and go to state 25
    Inst_Lectura                   shift and go to state 15
    Lista_Inst                     shift and go to state 83

state 44

    (6) Lista_Inst -> Inst .
    (7) Lista_Inst -> Inst . SEMICOLON Lista_Inst

    INST_END        reduce using rule 6 (Lista_Inst -> Inst .)
    SEMICOLON       shift and go to state 84


state 45

    (3) Bloque_Inst -> INST_BEGIN Lista_Inst . INST_END

    INST_END        shift and go to state 85


state 46

    (20) Inst_Funcion -> BOTTOM LPAREN . Operacion_binaria RPAREN
    (24) Inst_Funcion -> BOTTOM LPAREN . VAR_IDENTIFIER RPAREN
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    VAR_IDENTIFIER  shift and go to state 86
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 87
    Inst_Funcion                   shift and go to state 26

state 47

    (34) Inst_Asignacion -> VAR_IDENTIFIER EQUAL . Expresion
    (35) Expresion -> . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Expresion                      shift and go to state 88
    Operacion_binaria              shift and go to state 35
    Inst_Funcion                   shift and go to state 26

state 48

    (71) Inst_Case -> INST_CASE Operacion_binaria . INST_OF Casos INST_END
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    INST_OF         shift and go to state 89
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    AND             shift and go to state 58
    OR              shift and go to state 59
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71


state 49

    (76) Inst_For -> INST_FOR VAR_IDENTIFIER . INST_IN Operacion_binaria INST_DO Bloque_Control

    INST_IN         shift and go to state 90


state 50

    (69) Inst_If -> INST_IF Expresion . INST_THEN Bloque_Control
    (70) Inst_If -> INST_IF Expresion . INST_THEN Bloque_Control INST_ELSE Bloque_Control

    INST_THEN       shift and go to state 91


state 51

    (62) Inst_Salida -> INST_WRITELN Lista_Aux .

    SEMICOLON       reduce using rule 62 (Inst_Salida -> INST_WRITELN Lista_Aux .)
    INST_END        reduce using rule 62 (Inst_Salida -> INST_WRITELN Lista_Aux .)
    $end            reduce using rule 62 (Inst_Salida -> INST_WRITELN Lista_Aux .)
    INST_ELSE       reduce using rule 62 (Inst_Salida -> INST_WRITELN Lista_Aux .)


state 52

    (18) Inst_Funcion -> LENGTH LPAREN . Operacion_binaria RPAREN
    (22) Inst_Funcion -> LENGTH LPAREN . VAR_IDENTIFIER RPAREN
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    VAR_IDENTIFIER  shift and go to state 92
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 93
    Inst_Funcion                   shift and go to state 26

state 53

    (17) Inst_Funcion -> RTOI LPAREN . Operacion_binaria RPAREN
    (21) Inst_Funcion -> RTOI LPAREN . VAR_IDENTIFIER RPAREN
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    VAR_IDENTIFIER  shift and go to state 94
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 95
    Inst_Funcion                   shift and go to state 26

state 54

    (55) Operacion_binaria -> MINUS Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    PLUS            reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    MINUS           reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    TIMES           reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    DIVIDE          reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    MOD             reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    AND             reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    OR              reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    EQEQ            reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    NEQEQ           reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    GREAT           reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    GREATEQ         reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    LESS            reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    LESSEQ          reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    IN              reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    RANGE           reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    INTERSECTION    reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    COMMA           reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    $end            reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    SEMICOLON       reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    INST_END        reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    INST_ELSE       reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    INST_DO         reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    INST_OF         reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    INST_THEN       reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    RPAREN          reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 55 (Operacion_binaria -> MINUS Operacion_binaria .)

  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 72 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 73 ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]
  ! IN              [ shift and go to state 70 ]
  ! RANGE           [ shift and go to state 67 ]
  ! INTERSECTION    [ shift and go to state 71 ]


state 55

    (65) Lista_Aux -> Expresion COMMA . Lista_Aux
    (63) Lista_Aux -> . Expresion
    (64) Lista_Aux -> . STRING
    (65) Lista_Aux -> . Expresion COMMA Lista_Aux
    (66) Lista_Aux -> . STRING COMMA Lista_Aux
    (35) Expresion -> . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    STRING          shift and go to state 32
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Expresion                      shift and go to state 31
    Operacion_binaria              shift and go to state 35
    Inst_Funcion                   shift and go to state 26
    Lista_Aux                      shift and go to state 96

state 56

    (66) Lista_Aux -> STRING COMMA . Lista_Aux
    (63) Lista_Aux -> . Expresion
    (64) Lista_Aux -> . STRING
    (65) Lista_Aux -> . Expresion COMMA Lista_Aux
    (66) Lista_Aux -> . STRING COMMA Lista_Aux
    (35) Expresion -> . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    STRING          shift and go to state 32
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Expresion                      shift and go to state 31
    Operacion_binaria              shift and go to state 35
    Inst_Funcion                   shift and go to state 26
    Lista_Aux                      shift and go to state 97

state 57

    (53) Operacion_binaria -> LPAREN Operacion_binaria . RPAREN
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    RPAREN          shift and go to state 98
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    AND             shift and go to state 58
    OR              shift and go to state 59
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71


state 58

    (41) Operacion_binaria -> Operacion_binaria AND . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 99
    Inst_Funcion                   shift and go to state 26

state 59

    (42) Operacion_binaria -> Operacion_binaria OR . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 100
    Inst_Funcion                   shift and go to state 26

state 60

    (39) Operacion_binaria -> Operacion_binaria DIVIDE . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 101
    Inst_Funcion                   shift and go to state 26

state 61

    (46) Operacion_binaria -> Operacion_binaria GREATEQ . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 102
    Inst_Funcion                   shift and go to state 26

state 62

    (44) Operacion_binaria -> Operacion_binaria NEQEQ . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 103
    Inst_Funcion                   shift and go to state 26

state 63

    (43) Operacion_binaria -> Operacion_binaria EQEQ . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 104
    Inst_Funcion                   shift and go to state 26

state 64

    (47) Operacion_binaria -> Operacion_binaria LESS . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 105
    Inst_Funcion                   shift and go to state 26

state 65

    (45) Operacion_binaria -> Operacion_binaria GREAT . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 106
    Inst_Funcion                   shift and go to state 26

state 66

    (38) Operacion_binaria -> Operacion_binaria TIMES . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 107
    Inst_Funcion                   shift and go to state 26

state 67

    (58) Operacion_binaria -> Operacion_binaria RANGE . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 108
    Inst_Funcion                   shift and go to state 26

state 68

    (48) Operacion_binaria -> Operacion_binaria LESSEQ . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 109
    Inst_Funcion                   shift and go to state 26

state 69

    (36) Operacion_binaria -> Operacion_binaria PLUS . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 110
    Inst_Funcion                   shift and go to state 26

state 70

    (49) Operacion_binaria -> Operacion_binaria IN . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 111
    Inst_Funcion                   shift and go to state 26

state 71

    (59) Operacion_binaria -> Operacion_binaria INTERSECTION . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 112
    Inst_Funcion                   shift and go to state 26

state 72

    (37) Operacion_binaria -> Operacion_binaria MINUS . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 113
    Inst_Funcion                   shift and go to state 26

state 73

    (40) Operacion_binaria -> Operacion_binaria MOD . Operacion_binaria
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 114
    Inst_Funcion                   shift and go to state 26

state 74

    (50) Operacion_binaria -> NOT Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    AND             reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    OR              reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    COMMA           reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    $end            reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    SEMICOLON       reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    INST_END        reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    INST_ELSE       reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    INST_DO         reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    INST_OF         reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    INST_THEN       reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    RPAREN          reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71

  ! PLUS            [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! MOD             [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! EQEQ            [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! NEQEQ           [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! GREAT           [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! GREATEQ         [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! LESS            [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! LESSEQ          [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! IN              [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! INTERSECTION    [ reduce using rule 50 (Operacion_binaria -> NOT Operacion_binaria .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]


state 75

    (23) Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER . RPAREN
    (52) Operacion_binaria -> VAR_IDENTIFIER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 115
    PLUS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MINUS           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    TIMES           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    DIVIDE          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MOD             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    AND             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    OR              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    EQEQ            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    NEQEQ           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREAT           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREATEQ         reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESSEQ          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    IN              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    RANGE           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INTERSECTION    reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)

  ! RPAREN          [ reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .) ]


state 76

    (19) Inst_Funcion -> TOP LPAREN Operacion_binaria . RPAREN
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    AND             shift and go to state 58
    OR              shift and go to state 59
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71


state 77

    (77) Inst_While -> INST_WHILE Expresion INST_DO . Bloque_Inst
    (78) Inst_While -> INST_WHILE Expresion INST_DO . Inst
    (3) Bloque_Inst -> . INST_BEGIN Lista_Inst INST_END
    (4) Bloque_Inst -> . INST_BEGIN Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> . INST_BEGIN Inst_Declare INST_END
    (8) Inst -> . Inst_Asignacion
    (9) Inst -> . Inst_Lectura
    (10) Inst -> . Inst_For
    (11) Inst -> . Inst_While
    (12) Inst -> . Inst_If
    (13) Inst -> . Inst_Case
    (14) Inst -> . Inst_Salida
    (15) Inst -> . Inst_Funcion
    (16) Inst -> . Bloque_Inst
    (34) Inst_Asignacion -> . VAR_IDENTIFIER EQUAL Expresion
    (60) Inst_Lectura -> . INST_READ VAR_IDENTIFIER
    (76) Inst_For -> . INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
    (77) Inst_While -> . INST_WHILE Expresion INST_DO Bloque_Inst
    (78) Inst_While -> . INST_WHILE Expresion INST_DO Inst
    (69) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control
    (70) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (71) Inst_Case -> . INST_CASE Operacion_binaria INST_OF Casos INST_END
    (61) Inst_Salida -> . INST_WRITE Lista_Aux
    (62) Inst_Salida -> . INST_WRITELN Lista_Aux
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    INST_BEGIN      shift and go to state 10
    VAR_IDENTIFIER  shift and go to state 16
    INST_READ       shift and go to state 9
    INST_FOR        shift and go to state 19
    INST_WHILE      shift and go to state 8
    INST_IF         shift and go to state 20
    INST_CASE       shift and go to state 18
    INST_WRITE      shift and go to state 4
    INST_WRITELN    shift and go to state 21
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Inst_Salida                    shift and go to state 7
    Inst_Funcion                   shift and go to state 3
    Bloque_Inst                    shift and go to state 117
    Inst_If                        shift and go to state 17
    Inst_For                       shift and go to state 12
    Inst_While                     shift and go to state 14
    Inst                           shift and go to state 118
    Inst_Asignacion                shift and go to state 24
    Inst_Case                      shift and go to state 25
    Inst_Lectura                   shift and go to state 15

state 78

    (29) Lista_Variables -> VAR_IDENTIFIER .
    (30) Lista_Variables -> VAR_IDENTIFIER . COMMA Lista_Variables

    INST_AS         reduce using rule 29 (Lista_Variables -> VAR_IDENTIFIER .)
    COMMA           shift and go to state 119


state 79

    (25) Inst_Declare -> INST_DECLARE Lista_DeclareTipos .

    INST_END        reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    VAR_IDENTIFIER  reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    INST_READ       reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    INST_FOR        reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    INST_WHILE      reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    INST_IF         reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    INST_CASE       reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    INST_WRITE      reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    INST_WRITELN    reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    RTOI            reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    LENGTH          reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    TOP             reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    BOTTOM          reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)
    INST_BEGIN      reduce using rule 25 (Inst_Declare -> INST_DECLARE Lista_DeclareTipos .)


state 80

    (28) Lista_Declare -> Lista_Variables . INST_AS Tipo

    INST_AS         shift and go to state 120


state 81

    (26) Lista_DeclareTipos -> Lista_Declare .
    (27) Lista_DeclareTipos -> Lista_Declare . SEMICOLON Lista_DeclareTipos

    INST_END        reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    VAR_IDENTIFIER  reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    INST_READ       reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    INST_FOR        reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    INST_WHILE      reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    INST_IF         reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    INST_CASE       reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    INST_WRITE      reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    INST_WRITELN    reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    RTOI            reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    LENGTH          reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    TOP             reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    BOTTOM          reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    INST_BEGIN      reduce using rule 26 (Lista_DeclareTipos -> Lista_Declare .)
    SEMICOLON       shift and go to state 121


state 82

    (5) Bloque_Inst -> INST_BEGIN Inst_Declare INST_END .

    $end            reduce using rule 5 (Bloque_Inst -> INST_BEGIN Inst_Declare INST_END .)
    SEMICOLON       reduce using rule 5 (Bloque_Inst -> INST_BEGIN Inst_Declare INST_END .)
    INST_END        reduce using rule 5 (Bloque_Inst -> INST_BEGIN Inst_Declare INST_END .)
    INST_ELSE       reduce using rule 5 (Bloque_Inst -> INST_BEGIN Inst_Declare INST_END .)


state 83

    (4) Bloque_Inst -> INST_BEGIN Inst_Declare Lista_Inst . INST_END

    INST_END        shift and go to state 122


state 84

    (7) Lista_Inst -> Inst SEMICOLON . Lista_Inst
    (6) Lista_Inst -> . Inst
    (7) Lista_Inst -> . Inst SEMICOLON Lista_Inst
    (8) Inst -> . Inst_Asignacion
    (9) Inst -> . Inst_Lectura
    (10) Inst -> . Inst_For
    (11) Inst -> . Inst_While
    (12) Inst -> . Inst_If
    (13) Inst -> . Inst_Case
    (14) Inst -> . Inst_Salida
    (15) Inst -> . Inst_Funcion
    (16) Inst -> . Bloque_Inst
    (34) Inst_Asignacion -> . VAR_IDENTIFIER EQUAL Expresion
    (60) Inst_Lectura -> . INST_READ VAR_IDENTIFIER
    (76) Inst_For -> . INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
    (77) Inst_While -> . INST_WHILE Expresion INST_DO Bloque_Inst
    (78) Inst_While -> . INST_WHILE Expresion INST_DO Inst
    (69) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control
    (70) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (71) Inst_Case -> . INST_CASE Operacion_binaria INST_OF Casos INST_END
    (61) Inst_Salida -> . INST_WRITE Lista_Aux
    (62) Inst_Salida -> . INST_WRITELN Lista_Aux
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN
    (3) Bloque_Inst -> . INST_BEGIN Lista_Inst INST_END
    (4) Bloque_Inst -> . INST_BEGIN Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> . INST_BEGIN Inst_Declare INST_END

    VAR_IDENTIFIER  shift and go to state 16
    INST_READ       shift and go to state 9
    INST_FOR        shift and go to state 19
    INST_WHILE      shift and go to state 8
    INST_IF         shift and go to state 20
    INST_CASE       shift and go to state 18
    INST_WRITE      shift and go to state 4
    INST_WRITELN    shift and go to state 21
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11
    INST_BEGIN      shift and go to state 10

    Inst_Salida                    shift and go to state 7
    Inst_Funcion                   shift and go to state 3
    Bloque_Inst                    shift and go to state 42
    Inst_If                        shift and go to state 17
    Inst_For                       shift and go to state 12
    Inst_While                     shift and go to state 14
    Inst                           shift and go to state 44
    Inst_Asignacion                shift and go to state 24
    Inst_Case                      shift and go to state 25
    Inst_Lectura                   shift and go to state 15
    Lista_Inst                     shift and go to state 123

state 85

    (3) Bloque_Inst -> INST_BEGIN Lista_Inst INST_END .

    $end            reduce using rule 3 (Bloque_Inst -> INST_BEGIN Lista_Inst INST_END .)
    SEMICOLON       reduce using rule 3 (Bloque_Inst -> INST_BEGIN Lista_Inst INST_END .)
    INST_END        reduce using rule 3 (Bloque_Inst -> INST_BEGIN Lista_Inst INST_END .)
    INST_ELSE       reduce using rule 3 (Bloque_Inst -> INST_BEGIN Lista_Inst INST_END .)


state 86

    (24) Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER . RPAREN
    (52) Operacion_binaria -> VAR_IDENTIFIER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 124
    PLUS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MINUS           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    TIMES           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    DIVIDE          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MOD             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    AND             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    OR              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    EQEQ            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    NEQEQ           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREAT           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREATEQ         reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESSEQ          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    IN              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    RANGE           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INTERSECTION    reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)

  ! RPAREN          [ reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .) ]


state 87

    (20) Inst_Funcion -> BOTTOM LPAREN Operacion_binaria . RPAREN
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    RPAREN          shift and go to state 125
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    AND             shift and go to state 58
    OR              shift and go to state 59
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71


state 88

    (34) Inst_Asignacion -> VAR_IDENTIFIER EQUAL Expresion .

    SEMICOLON       reduce using rule 34 (Inst_Asignacion -> VAR_IDENTIFIER EQUAL Expresion .)
    INST_END        reduce using rule 34 (Inst_Asignacion -> VAR_IDENTIFIER EQUAL Expresion .)
    $end            reduce using rule 34 (Inst_Asignacion -> VAR_IDENTIFIER EQUAL Expresion .)
    INST_ELSE       reduce using rule 34 (Inst_Asignacion -> VAR_IDENTIFIER EQUAL Expresion .)


state 89

    (71) Inst_Case -> INST_CASE Operacion_binaria INST_OF . Casos INST_END
    (72) Casos -> . VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON
    (73) Casos -> . Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON
    (74) Casos -> . VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON Casos
    (75) Casos -> . Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON Casos
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    VAR_IDENTIFIER  shift and go to state 127
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 128
    Casos                          shift and go to state 126
    Inst_Funcion                   shift and go to state 26

state 90

    (76) Inst_For -> INST_FOR VAR_IDENTIFIER INST_IN . Operacion_binaria INST_DO Bloque_Control
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    VAR_IDENTIFIER  shift and go to state 33
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 129
    Inst_Funcion                   shift and go to state 26

state 91

    (69) Inst_If -> INST_IF Expresion INST_THEN . Bloque_Control
    (70) Inst_If -> INST_IF Expresion INST_THEN . Bloque_Control INST_ELSE Bloque_Control
    (67) Bloque_Control -> . Inst
    (68) Bloque_Control -> . Bloque_Inst
    (8) Inst -> . Inst_Asignacion
    (9) Inst -> . Inst_Lectura
    (10) Inst -> . Inst_For
    (11) Inst -> . Inst_While
    (12) Inst -> . Inst_If
    (13) Inst -> . Inst_Case
    (14) Inst -> . Inst_Salida
    (15) Inst -> . Inst_Funcion
    (16) Inst -> . Bloque_Inst
    (3) Bloque_Inst -> . INST_BEGIN Lista_Inst INST_END
    (4) Bloque_Inst -> . INST_BEGIN Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> . INST_BEGIN Inst_Declare INST_END
    (34) Inst_Asignacion -> . VAR_IDENTIFIER EQUAL Expresion
    (60) Inst_Lectura -> . INST_READ VAR_IDENTIFIER
    (76) Inst_For -> . INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
    (77) Inst_While -> . INST_WHILE Expresion INST_DO Bloque_Inst
    (78) Inst_While -> . INST_WHILE Expresion INST_DO Inst
    (69) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control
    (70) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (71) Inst_Case -> . INST_CASE Operacion_binaria INST_OF Casos INST_END
    (61) Inst_Salida -> . INST_WRITE Lista_Aux
    (62) Inst_Salida -> . INST_WRITELN Lista_Aux
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    INST_BEGIN      shift and go to state 10
    VAR_IDENTIFIER  shift and go to state 16
    INST_READ       shift and go to state 9
    INST_FOR        shift and go to state 19
    INST_WHILE      shift and go to state 8
    INST_IF         shift and go to state 20
    INST_CASE       shift and go to state 18
    INST_WRITE      shift and go to state 4
    INST_WRITELN    shift and go to state 21
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Bloque_Control                 shift and go to state 131
    Inst_Funcion                   shift and go to state 3
    Bloque_Inst                    shift and go to state 130
    Inst_If                        shift and go to state 17
    Inst_Salida                    shift and go to state 7
    Inst_For                       shift and go to state 12
    Inst_While                     shift and go to state 14
    Inst                           shift and go to state 132
    Inst_Asignacion                shift and go to state 24
    Inst_Case                      shift and go to state 25
    Inst_Lectura                   shift and go to state 15

state 92

    (22) Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER . RPAREN
    (52) Operacion_binaria -> VAR_IDENTIFIER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 133
    PLUS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MINUS           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    TIMES           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    DIVIDE          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MOD             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    AND             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    OR              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    EQEQ            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    NEQEQ           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREAT           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREATEQ         reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESSEQ          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    IN              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    RANGE           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INTERSECTION    reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)

  ! RPAREN          [ reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .) ]


state 93

    (18) Inst_Funcion -> LENGTH LPAREN Operacion_binaria . RPAREN
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    RPAREN          shift and go to state 134
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    AND             shift and go to state 58
    OR              shift and go to state 59
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71


state 94

    (21) Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER . RPAREN
    (52) Operacion_binaria -> VAR_IDENTIFIER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 135
    PLUS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MINUS           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    TIMES           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    DIVIDE          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MOD             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    AND             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    OR              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    EQEQ            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    NEQEQ           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREAT           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREATEQ         reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESSEQ          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    IN              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    RANGE           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INTERSECTION    reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)

  ! RPAREN          [ reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .) ]


state 95

    (17) Inst_Funcion -> RTOI LPAREN Operacion_binaria . RPAREN
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    RPAREN          shift and go to state 136
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    AND             shift and go to state 58
    OR              shift and go to state 59
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71


state 96

    (65) Lista_Aux -> Expresion COMMA Lista_Aux .

    $end            reduce using rule 65 (Lista_Aux -> Expresion COMMA Lista_Aux .)
    SEMICOLON       reduce using rule 65 (Lista_Aux -> Expresion COMMA Lista_Aux .)
    INST_END        reduce using rule 65 (Lista_Aux -> Expresion COMMA Lista_Aux .)
    INST_ELSE       reduce using rule 65 (Lista_Aux -> Expresion COMMA Lista_Aux .)


state 97

    (66) Lista_Aux -> STRING COMMA Lista_Aux .

    $end            reduce using rule 66 (Lista_Aux -> STRING COMMA Lista_Aux .)
    SEMICOLON       reduce using rule 66 (Lista_Aux -> STRING COMMA Lista_Aux .)
    INST_END        reduce using rule 66 (Lista_Aux -> STRING COMMA Lista_Aux .)
    INST_ELSE       reduce using rule 66 (Lista_Aux -> STRING COMMA Lista_Aux .)


state 98

    (53) Operacion_binaria -> LPAREN Operacion_binaria RPAREN .

    PLUS            reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    MINUS           reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    TIMES           reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    DIVIDE          reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    MOD             reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    AND             reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    OR              reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    EQEQ            reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    NEQEQ           reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    GREAT           reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    GREATEQ         reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    LESS            reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    LESSEQ          reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    IN              reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    RANGE           reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    INTERSECTION    reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    COMMA           reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    $end            reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    SEMICOLON       reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    INST_END        reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    INST_ELSE       reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    INST_DO         reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    INST_OF         reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    INST_THEN       reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    RPAREN          reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)
    CASE_ASSIGN     reduce using rule 53 (Operacion_binaria -> LPAREN Operacion_binaria RPAREN .)


state 99

    (41) Operacion_binaria -> Operacion_binaria AND Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    AND             reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    OR              reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    COMMA           reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    $end            reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    SEMICOLON       reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    INST_END        reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    INST_ELSE       reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    INST_DO         reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    INST_OF         reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    INST_THEN       reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    RPAREN          reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71

  ! PLUS            [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! MOD             [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! EQEQ            [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! NEQEQ           [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! GREAT           [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! GREATEQ         [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! LESS            [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! LESSEQ          [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! IN              [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! INTERSECTION    [ reduce using rule 41 (Operacion_binaria -> Operacion_binaria AND Operacion_binaria .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]


state 100

    (42) Operacion_binaria -> Operacion_binaria OR Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    OR              reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    COMMA           reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    $end            reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    SEMICOLON       reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    INST_END        reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    INST_ELSE       reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    INST_DO         reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    INST_OF         reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    INST_THEN       reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    RPAREN          reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    AND             shift and go to state 58
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71

  ! PLUS            [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! MOD             [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! AND             [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! EQEQ            [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! NEQEQ           [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! GREAT           [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! GREATEQ         [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! LESS            [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! LESSEQ          [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! IN              [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! INTERSECTION    [ reduce using rule 42 (Operacion_binaria -> Operacion_binaria OR Operacion_binaria .) ]
  ! OR              [ shift and go to state 59 ]


state 101

    (39) Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    PLUS            reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    MINUS           reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    TIMES           reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    DIVIDE          reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    MOD             reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    AND             reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    OR              reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    EQEQ            reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    NEQEQ           reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    GREAT           reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    GREATEQ         reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    LESS            reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    LESSEQ          reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    IN              reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    INTERSECTION    reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    COMMA           reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    $end            reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    SEMICOLON       reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    INST_END        reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    INST_ELSE       reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    INST_DO         reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    INST_OF         reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    INST_THEN       reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    RPAREN          reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .)
    RANGE           shift and go to state 67

  ! RANGE           [ reduce using rule 39 (Operacion_binaria -> Operacion_binaria DIVIDE Operacion_binaria .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 72 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 73 ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]
  ! IN              [ shift and go to state 70 ]
  ! INTERSECTION    [ shift and go to state 71 ]


state 102

    (46) Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    AND             reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    OR              reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    GREAT           reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    GREATEQ         reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    LESS            reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    LESSEQ          reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    COMMA           reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    $end            reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    SEMICOLON       reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    INST_END        reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    INST_ELSE       reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    INST_DO         reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    INST_OF         reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    INST_THEN       reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    RPAREN          reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71

  ! PLUS            [ reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .) ]
  ! MOD             [ reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .) ]
  ! EQEQ            [ reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .) ]
  ! NEQEQ           [ reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .) ]
  ! IN              [ reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .) ]
  ! INTERSECTION    [ reduce using rule 46 (Operacion_binaria -> Operacion_binaria GREATEQ Operacion_binaria .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]


state 103

    (44) Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    AND             reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    OR              reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    EQEQ            reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    NEQEQ           reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    GREAT           reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    GREATEQ         reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    LESS            reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    LESSEQ          reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    COMMA           reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    $end            reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    SEMICOLON       reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    INST_END        reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    INST_ELSE       reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    INST_DO         reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    INST_OF         reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    INST_THEN       reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    RPAREN          reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71

  ! PLUS            [ reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .) ]
  ! MOD             [ reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .) ]
  ! IN              [ reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .) ]
  ! INTERSECTION    [ reduce using rule 44 (Operacion_binaria -> Operacion_binaria NEQEQ Operacion_binaria .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]


state 104

    (43) Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    AND             reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    OR              reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    EQEQ            reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    NEQEQ           reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    GREAT           reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    GREATEQ         reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    LESS            reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    LESSEQ          reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    COMMA           reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    $end            reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    SEMICOLON       reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    INST_END        reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    INST_ELSE       reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    INST_DO         reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    INST_OF         reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    INST_THEN       reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    RPAREN          reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71

  ! PLUS            [ reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .) ]
  ! MOD             [ reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .) ]
  ! IN              [ reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .) ]
  ! INTERSECTION    [ reduce using rule 43 (Operacion_binaria -> Operacion_binaria EQEQ Operacion_binaria .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]


state 105

    (47) Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    AND             reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    OR              reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    GREAT           reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    GREATEQ         reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    LESS            reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    LESSEQ          reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    COMMA           reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    $end            reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    SEMICOLON       reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    INST_END        reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    INST_ELSE       reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    INST_DO         reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    INST_OF         reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    INST_THEN       reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    RPAREN          reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71

  ! PLUS            [ reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .) ]
  ! MOD             [ reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .) ]
  ! EQEQ            [ reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .) ]
  ! NEQEQ           [ reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .) ]
  ! IN              [ reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .) ]
  ! INTERSECTION    [ reduce using rule 47 (Operacion_binaria -> Operacion_binaria LESS Operacion_binaria .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]


state 106

    (45) Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    AND             reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    OR              reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    GREAT           reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    GREATEQ         reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    LESS            reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    LESSEQ          reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    COMMA           reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    $end            reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    SEMICOLON       reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    INST_END        reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    INST_ELSE       reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    INST_DO         reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    INST_OF         reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    INST_THEN       reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    RPAREN          reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71

  ! PLUS            [ reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .) ]
  ! MOD             [ reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .) ]
  ! EQEQ            [ reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .) ]
  ! NEQEQ           [ reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .) ]
  ! IN              [ reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .) ]
  ! INTERSECTION    [ reduce using rule 45 (Operacion_binaria -> Operacion_binaria GREAT Operacion_binaria .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]


state 107

    (38) Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    PLUS            reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    MINUS           reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    TIMES           reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    DIVIDE          reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    MOD             reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    AND             reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    OR              reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    EQEQ            reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    NEQEQ           reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    GREAT           reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    GREATEQ         reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    LESS            reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    LESSEQ          reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    IN              reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    INTERSECTION    reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    COMMA           reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    $end            reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    SEMICOLON       reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    INST_END        reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    INST_ELSE       reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    INST_DO         reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    INST_OF         reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    INST_THEN       reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    RPAREN          reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .)
    RANGE           shift and go to state 67

  ! RANGE           [ reduce using rule 38 (Operacion_binaria -> Operacion_binaria TIMES Operacion_binaria .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 72 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 73 ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]
  ! IN              [ shift and go to state 70 ]
  ! INTERSECTION    [ shift and go to state 71 ]


state 108

    (58) Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    PLUS            reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    MINUS           reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    TIMES           reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    DIVIDE          reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    MOD             reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    AND             reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    OR              reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    EQEQ            reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    NEQEQ           reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    GREAT           reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    GREATEQ         reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    LESS            reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    LESSEQ          reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    IN              reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    RANGE           reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    INTERSECTION    reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    COMMA           reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    $end            reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    SEMICOLON       reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    INST_END        reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    INST_ELSE       reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    INST_DO         reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    INST_OF         reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    INST_THEN       reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    RPAREN          reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 58 (Operacion_binaria -> Operacion_binaria RANGE Operacion_binaria .)

  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 72 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 73 ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]
  ! IN              [ shift and go to state 70 ]
  ! RANGE           [ shift and go to state 67 ]
  ! INTERSECTION    [ shift and go to state 71 ]


state 109

    (48) Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    AND             reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    OR              reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    GREAT           reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    GREATEQ         reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    LESS            reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    LESSEQ          reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    COMMA           reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    $end            reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    SEMICOLON       reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    INST_END        reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    INST_ELSE       reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    INST_DO         reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    INST_OF         reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    INST_THEN       reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    RPAREN          reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71

  ! PLUS            [ reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .) ]
  ! MOD             [ reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .) ]
  ! EQEQ            [ reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .) ]
  ! NEQEQ           [ reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .) ]
  ! IN              [ reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .) ]
  ! INTERSECTION    [ reduce using rule 48 (Operacion_binaria -> Operacion_binaria LESSEQ Operacion_binaria .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]


state 110

    (36) Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    PLUS            reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    MINUS           reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    AND             reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    OR              reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    EQEQ            reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    NEQEQ           reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    GREAT           reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    GREATEQ         reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    LESS            reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    LESSEQ          reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    IN              reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    INTERSECTION    reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    COMMA           reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    $end            reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    SEMICOLON       reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    INST_END        reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    INST_ELSE       reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    INST_DO         reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    INST_OF         reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    INST_THEN       reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    RPAREN          reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .)
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    RANGE           shift and go to state 67

  ! TIMES           [ reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .) ]
  ! MOD             [ reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 36 (Operacion_binaria -> Operacion_binaria PLUS Operacion_binaria .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 72 ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]
  ! IN              [ shift and go to state 70 ]
  ! INTERSECTION    [ shift and go to state 71 ]


state 111

    (49) Operacion_binaria -> Operacion_binaria IN Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    AND             reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    OR              reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    EQEQ            reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    NEQEQ           reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    GREAT           reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    GREATEQ         reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    LESS            reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    LESSEQ          reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    IN              reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    COMMA           reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    $end            reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    SEMICOLON       reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    INST_END        reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    INST_ELSE       reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    INST_DO         reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    INST_OF         reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    INST_THEN       reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    RPAREN          reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71

  ! PLUS            [ reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .) ]
  ! MOD             [ reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .) ]
  ! INTERSECTION    [ reduce using rule 49 (Operacion_binaria -> Operacion_binaria IN Operacion_binaria .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]
  ! IN              [ shift and go to state 70 ]


state 112

    (59) Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    AND             reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    OR              reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    EQEQ            reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    NEQEQ           reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    GREAT           reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    GREATEQ         reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    LESS            reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    LESSEQ          reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    IN              reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    INTERSECTION    reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    COMMA           reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    $end            reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    SEMICOLON       reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    INST_END        reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    INST_ELSE       reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    INST_DO         reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    INST_OF         reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    INST_THEN       reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    RPAREN          reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    RANGE           shift and go to state 67

  ! PLUS            [ reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .) ]
  ! MINUS           [ reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .) ]
  ! TIMES           [ reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .) ]
  ! MOD             [ reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 59 (Operacion_binaria -> Operacion_binaria INTERSECTION Operacion_binaria .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]
  ! IN              [ shift and go to state 70 ]
  ! INTERSECTION    [ shift and go to state 71 ]


state 113

    (37) Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    PLUS            reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    MINUS           reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    AND             reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    OR              reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    EQEQ            reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    NEQEQ           reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    GREAT           reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    GREATEQ         reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    LESS            reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    LESSEQ          reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    IN              reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    INTERSECTION    reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    COMMA           reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    $end            reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    SEMICOLON       reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    INST_END        reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    INST_ELSE       reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    INST_DO         reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    INST_OF         reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    INST_THEN       reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    RPAREN          reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .)
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    RANGE           shift and go to state 67

  ! TIMES           [ reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .) ]
  ! DIVIDE          [ reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .) ]
  ! MOD             [ reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .) ]
  ! RANGE           [ reduce using rule 37 (Operacion_binaria -> Operacion_binaria MINUS Operacion_binaria .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 72 ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]
  ! IN              [ shift and go to state 70 ]
  ! INTERSECTION    [ shift and go to state 71 ]


state 114

    (40) Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    PLUS            reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    MINUS           reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    TIMES           reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    DIVIDE          reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    MOD             reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    AND             reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    OR              reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    EQEQ            reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    NEQEQ           reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    GREAT           reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    GREATEQ         reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    LESS            reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    LESSEQ          reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    IN              reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    INTERSECTION    reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    COMMA           reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    $end            reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    SEMICOLON       reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    INST_END        reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    INST_ELSE       reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    INST_DO         reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    INST_OF         reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    INST_THEN       reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    RPAREN          reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    CASE_ASSIGN     reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .)
    RANGE           shift and go to state 67

  ! RANGE           [ reduce using rule 40 (Operacion_binaria -> Operacion_binaria MOD Operacion_binaria .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 72 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 73 ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! EQEQ            [ shift and go to state 63 ]
  ! NEQEQ           [ shift and go to state 62 ]
  ! GREAT           [ shift and go to state 65 ]
  ! GREATEQ         [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 64 ]
  ! LESSEQ          [ shift and go to state 68 ]
  ! IN              [ shift and go to state 70 ]
  ! INTERSECTION    [ shift and go to state 71 ]


state 115

    (23) Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .

    $end            reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    SEMICOLON       reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    INST_END        reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    INST_ELSE       reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    PLUS            reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    MINUS           reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    TIMES           reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    DIVIDE          reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    MOD             reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    AND             reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    OR              reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    EQEQ            reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    NEQEQ           reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    GREAT           reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    GREATEQ         reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    LESS            reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    LESSEQ          reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    IN              reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    RANGE           reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    INTERSECTION    reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    COMMA           reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    INST_DO         reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    INST_OF         reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    INST_THEN       reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    RPAREN          reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)
    CASE_ASSIGN     reduce using rule 23 (Inst_Funcion -> TOP LPAREN VAR_IDENTIFIER RPAREN .)


state 116

    (19) Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .

    $end            reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    SEMICOLON       reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    INST_END        reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    INST_ELSE       reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    PLUS            reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    MINUS           reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    TIMES           reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    DIVIDE          reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    MOD             reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    AND             reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    OR              reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    EQEQ            reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    NEQEQ           reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    GREAT           reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    GREATEQ         reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    LESS            reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    LESSEQ          reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    IN              reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    RANGE           reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    INTERSECTION    reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    COMMA           reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    INST_DO         reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    INST_OF         reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    INST_THEN       reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    RPAREN          reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)
    CASE_ASSIGN     reduce using rule 19 (Inst_Funcion -> TOP LPAREN Operacion_binaria RPAREN .)


state 117

    (77) Inst_While -> INST_WHILE Expresion INST_DO Bloque_Inst .
    (16) Inst -> Bloque_Inst .

  ! reduce/reduce conflict for $end resolved using rule 16 (Inst -> Bloque_Inst .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 16 (Inst -> Bloque_Inst .)
  ! reduce/reduce conflict for INST_END resolved using rule 16 (Inst -> Bloque_Inst .)
  ! reduce/reduce conflict for INST_ELSE resolved using rule 16 (Inst -> Bloque_Inst .)
    $end            reduce using rule 16 (Inst -> Bloque_Inst .)
    SEMICOLON       reduce using rule 16 (Inst -> Bloque_Inst .)
    INST_END        reduce using rule 16 (Inst -> Bloque_Inst .)
    INST_ELSE       reduce using rule 16 (Inst -> Bloque_Inst .)

  ! SEMICOLON       [ reduce using rule 77 (Inst_While -> INST_WHILE Expresion INST_DO Bloque_Inst .) ]
  ! INST_END        [ reduce using rule 77 (Inst_While -> INST_WHILE Expresion INST_DO Bloque_Inst .) ]
  ! $end            [ reduce using rule 77 (Inst_While -> INST_WHILE Expresion INST_DO Bloque_Inst .) ]
  ! INST_ELSE       [ reduce using rule 77 (Inst_While -> INST_WHILE Expresion INST_DO Bloque_Inst .) ]


state 118

    (78) Inst_While -> INST_WHILE Expresion INST_DO Inst .

    SEMICOLON       reduce using rule 78 (Inst_While -> INST_WHILE Expresion INST_DO Inst .)
    INST_END        reduce using rule 78 (Inst_While -> INST_WHILE Expresion INST_DO Inst .)
    $end            reduce using rule 78 (Inst_While -> INST_WHILE Expresion INST_DO Inst .)
    INST_ELSE       reduce using rule 78 (Inst_While -> INST_WHILE Expresion INST_DO Inst .)


state 119

    (30) Lista_Variables -> VAR_IDENTIFIER COMMA . Lista_Variables
    (29) Lista_Variables -> . VAR_IDENTIFIER
    (30) Lista_Variables -> . VAR_IDENTIFIER COMMA Lista_Variables

    VAR_IDENTIFIER  shift and go to state 78

    Lista_Variables                shift and go to state 137

state 120

    (28) Lista_Declare -> Lista_Variables INST_AS . Tipo
    (31) Tipo -> . TYPEDEF_INT
    (32) Tipo -> . TYPEDEF_BOOL
    (33) Tipo -> . TYPEDEF_RANGE

    TYPEDEF_INT     shift and go to state 138
    TYPEDEF_BOOL    shift and go to state 141
    TYPEDEF_RANGE   shift and go to state 140

    Tipo                           shift and go to state 139

state 121

    (27) Lista_DeclareTipos -> Lista_Declare SEMICOLON . Lista_DeclareTipos
    (26) Lista_DeclareTipos -> . Lista_Declare
    (27) Lista_DeclareTipos -> . Lista_Declare SEMICOLON Lista_DeclareTipos
    (28) Lista_Declare -> . Lista_Variables INST_AS Tipo
    (29) Lista_Variables -> . VAR_IDENTIFIER
    (30) Lista_Variables -> . VAR_IDENTIFIER COMMA Lista_Variables

    VAR_IDENTIFIER  shift and go to state 78

    Lista_Variables                shift and go to state 80
    Lista_Declare                  shift and go to state 81
    Lista_DeclareTipos             shift and go to state 142

state 122

    (4) Bloque_Inst -> INST_BEGIN Inst_Declare Lista_Inst INST_END .

    $end            reduce using rule 4 (Bloque_Inst -> INST_BEGIN Inst_Declare Lista_Inst INST_END .)
    SEMICOLON       reduce using rule 4 (Bloque_Inst -> INST_BEGIN Inst_Declare Lista_Inst INST_END .)
    INST_END        reduce using rule 4 (Bloque_Inst -> INST_BEGIN Inst_Declare Lista_Inst INST_END .)
    INST_ELSE       reduce using rule 4 (Bloque_Inst -> INST_BEGIN Inst_Declare Lista_Inst INST_END .)


state 123

    (7) Lista_Inst -> Inst SEMICOLON Lista_Inst .

    INST_END        reduce using rule 7 (Lista_Inst -> Inst SEMICOLON Lista_Inst .)


state 124

    (24) Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .

    $end            reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    SEMICOLON       reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    INST_END        reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    INST_ELSE       reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    PLUS            reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    MINUS           reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    TIMES           reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    DIVIDE          reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    MOD             reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    AND             reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    OR              reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    EQEQ            reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    NEQEQ           reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    GREAT           reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    GREATEQ         reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    LESS            reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    LESSEQ          reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    IN              reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    RANGE           reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    INTERSECTION    reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    COMMA           reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    INST_DO         reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    INST_OF         reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    INST_THEN       reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    RPAREN          reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)
    CASE_ASSIGN     reduce using rule 24 (Inst_Funcion -> BOTTOM LPAREN VAR_IDENTIFIER RPAREN .)


state 125

    (20) Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .

    $end            reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    SEMICOLON       reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    INST_END        reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    INST_ELSE       reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    PLUS            reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    MINUS           reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    TIMES           reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    DIVIDE          reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    MOD             reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    AND             reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    OR              reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    EQEQ            reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    NEQEQ           reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    GREAT           reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    GREATEQ         reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    LESS            reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    LESSEQ          reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    IN              reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    RANGE           reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    INTERSECTION    reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    COMMA           reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    INST_DO         reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    INST_OF         reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    INST_THEN       reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    RPAREN          reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)
    CASE_ASSIGN     reduce using rule 20 (Inst_Funcion -> BOTTOM LPAREN Operacion_binaria RPAREN .)


state 126

    (71) Inst_Case -> INST_CASE Operacion_binaria INST_OF Casos . INST_END

    INST_END        shift and go to state 143


state 127

    (72) Casos -> VAR_IDENTIFIER . CASE_ASSIGN Bloque_Control SEMICOLON
    (74) Casos -> VAR_IDENTIFIER . CASE_ASSIGN Bloque_Control SEMICOLON Casos
    (52) Operacion_binaria -> VAR_IDENTIFIER .

  ! shift/reduce conflict for CASE_ASSIGN resolved as shift
    CASE_ASSIGN     shift and go to state 144
    PLUS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MINUS           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    TIMES           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    DIVIDE          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    MOD             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    AND             reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    OR              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    EQEQ            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    NEQEQ           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREAT           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    GREATEQ         reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESS            reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    LESSEQ          reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    IN              reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    RANGE           reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)
    INTERSECTION    reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .)

  ! CASE_ASSIGN     [ reduce using rule 52 (Operacion_binaria -> VAR_IDENTIFIER .) ]


state 128

    (73) Casos -> Operacion_binaria . CASE_ASSIGN Bloque_Control SEMICOLON
    (75) Casos -> Operacion_binaria . CASE_ASSIGN Bloque_Control SEMICOLON Casos
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    CASE_ASSIGN     shift and go to state 145
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    AND             shift and go to state 58
    OR              shift and go to state 59
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71


state 129

    (76) Inst_For -> INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria . INST_DO Bloque_Control
    (36) Operacion_binaria -> Operacion_binaria . PLUS Operacion_binaria
    (37) Operacion_binaria -> Operacion_binaria . MINUS Operacion_binaria
    (38) Operacion_binaria -> Operacion_binaria . TIMES Operacion_binaria
    (39) Operacion_binaria -> Operacion_binaria . DIVIDE Operacion_binaria
    (40) Operacion_binaria -> Operacion_binaria . MOD Operacion_binaria
    (41) Operacion_binaria -> Operacion_binaria . AND Operacion_binaria
    (42) Operacion_binaria -> Operacion_binaria . OR Operacion_binaria
    (43) Operacion_binaria -> Operacion_binaria . EQEQ Operacion_binaria
    (44) Operacion_binaria -> Operacion_binaria . NEQEQ Operacion_binaria
    (45) Operacion_binaria -> Operacion_binaria . GREAT Operacion_binaria
    (46) Operacion_binaria -> Operacion_binaria . GREATEQ Operacion_binaria
    (47) Operacion_binaria -> Operacion_binaria . LESS Operacion_binaria
    (48) Operacion_binaria -> Operacion_binaria . LESSEQ Operacion_binaria
    (49) Operacion_binaria -> Operacion_binaria . IN Operacion_binaria
    (58) Operacion_binaria -> Operacion_binaria . RANGE Operacion_binaria
    (59) Operacion_binaria -> Operacion_binaria . INTERSECTION Operacion_binaria

    INST_DO         shift and go to state 146
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 73
    AND             shift and go to state 58
    OR              shift and go to state 59
    EQEQ            shift and go to state 63
    NEQEQ           shift and go to state 62
    GREAT           shift and go to state 65
    GREATEQ         shift and go to state 61
    LESS            shift and go to state 64
    LESSEQ          shift and go to state 68
    IN              shift and go to state 70
    RANGE           shift and go to state 67
    INTERSECTION    shift and go to state 71


state 130

    (68) Bloque_Control -> Bloque_Inst .
    (16) Inst -> Bloque_Inst .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 16 (Inst -> Bloque_Inst .)
  ! reduce/reduce conflict for $end resolved using rule 16 (Inst -> Bloque_Inst .)
  ! reduce/reduce conflict for INST_END resolved using rule 16 (Inst -> Bloque_Inst .)
  ! reduce/reduce conflict for INST_ELSE resolved using rule 16 (Inst -> Bloque_Inst .)
    SEMICOLON       reduce using rule 16 (Inst -> Bloque_Inst .)
    $end            reduce using rule 16 (Inst -> Bloque_Inst .)
    INST_END        reduce using rule 16 (Inst -> Bloque_Inst .)
    INST_ELSE       reduce using rule 16 (Inst -> Bloque_Inst .)

  ! SEMICOLON       [ reduce using rule 68 (Bloque_Control -> Bloque_Inst .) ]
  ! $end            [ reduce using rule 68 (Bloque_Control -> Bloque_Inst .) ]
  ! INST_END        [ reduce using rule 68 (Bloque_Control -> Bloque_Inst .) ]
  ! INST_ELSE       [ reduce using rule 68 (Bloque_Control -> Bloque_Inst .) ]


state 131

    (69) Inst_If -> INST_IF Expresion INST_THEN Bloque_Control .
    (70) Inst_If -> INST_IF Expresion INST_THEN Bloque_Control . INST_ELSE Bloque_Control

  ! shift/reduce conflict for INST_ELSE resolved as shift
    SEMICOLON       reduce using rule 69 (Inst_If -> INST_IF Expresion INST_THEN Bloque_Control .)
    INST_END        reduce using rule 69 (Inst_If -> INST_IF Expresion INST_THEN Bloque_Control .)
    $end            reduce using rule 69 (Inst_If -> INST_IF Expresion INST_THEN Bloque_Control .)
    INST_ELSE       shift and go to state 147

  ! INST_ELSE       [ reduce using rule 69 (Inst_If -> INST_IF Expresion INST_THEN Bloque_Control .) ]


state 132

    (67) Bloque_Control -> Inst .

    SEMICOLON       reduce using rule 67 (Bloque_Control -> Inst .)
    $end            reduce using rule 67 (Bloque_Control -> Inst .)
    INST_END        reduce using rule 67 (Bloque_Control -> Inst .)
    INST_ELSE       reduce using rule 67 (Bloque_Control -> Inst .)


state 133

    (22) Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .

    $end            reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    SEMICOLON       reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    INST_END        reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    INST_ELSE       reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    PLUS            reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    MINUS           reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    TIMES           reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    DIVIDE          reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    MOD             reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    AND             reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    OR              reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    EQEQ            reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    NEQEQ           reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    GREAT           reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    GREATEQ         reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    LESS            reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    LESSEQ          reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    IN              reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    RANGE           reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    INTERSECTION    reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    COMMA           reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    INST_DO         reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    INST_OF         reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    INST_THEN       reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    RPAREN          reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)
    CASE_ASSIGN     reduce using rule 22 (Inst_Funcion -> LENGTH LPAREN VAR_IDENTIFIER RPAREN .)


state 134

    (18) Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .

    $end            reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    SEMICOLON       reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    INST_END        reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    INST_ELSE       reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    PLUS            reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    MINUS           reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    TIMES           reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    DIVIDE          reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    MOD             reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    AND             reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    OR              reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    EQEQ            reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    NEQEQ           reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    GREAT           reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    GREATEQ         reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    LESS            reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    LESSEQ          reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    IN              reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    RANGE           reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    INTERSECTION    reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    COMMA           reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    INST_DO         reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    INST_OF         reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    INST_THEN       reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    RPAREN          reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)
    CASE_ASSIGN     reduce using rule 18 (Inst_Funcion -> LENGTH LPAREN Operacion_binaria RPAREN .)


state 135

    (21) Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .

    $end            reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    SEMICOLON       reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    INST_END        reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    INST_ELSE       reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    PLUS            reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    MINUS           reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    TIMES           reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    DIVIDE          reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    MOD             reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    AND             reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    OR              reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    EQEQ            reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    NEQEQ           reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    GREAT           reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    GREATEQ         reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    LESS            reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    LESSEQ          reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    IN              reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    RANGE           reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    INTERSECTION    reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    COMMA           reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    INST_DO         reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    INST_OF         reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    INST_THEN       reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    RPAREN          reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)
    CASE_ASSIGN     reduce using rule 21 (Inst_Funcion -> RTOI LPAREN VAR_IDENTIFIER RPAREN .)


state 136

    (17) Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .

    $end            reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    SEMICOLON       reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    INST_END        reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    INST_ELSE       reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    PLUS            reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    MINUS           reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    TIMES           reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    DIVIDE          reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    MOD             reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    AND             reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    OR              reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    EQEQ            reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    NEQEQ           reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    GREAT           reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    GREATEQ         reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    LESS            reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    LESSEQ          reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    IN              reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    RANGE           reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    INTERSECTION    reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    COMMA           reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    INST_DO         reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    INST_OF         reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    INST_THEN       reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    RPAREN          reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)
    CASE_ASSIGN     reduce using rule 17 (Inst_Funcion -> RTOI LPAREN Operacion_binaria RPAREN .)


state 137

    (30) Lista_Variables -> VAR_IDENTIFIER COMMA Lista_Variables .

    INST_AS         reduce using rule 30 (Lista_Variables -> VAR_IDENTIFIER COMMA Lista_Variables .)


state 138

    (31) Tipo -> TYPEDEF_INT .

    SEMICOLON       reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    INST_END        reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    VAR_IDENTIFIER  reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    INST_READ       reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    INST_FOR        reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    INST_WHILE      reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    INST_IF         reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    INST_CASE       reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    INST_WRITE      reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    INST_WRITELN    reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    RTOI            reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    LENGTH          reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    TOP             reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    BOTTOM          reduce using rule 31 (Tipo -> TYPEDEF_INT .)
    INST_BEGIN      reduce using rule 31 (Tipo -> TYPEDEF_INT .)


state 139

    (28) Lista_Declare -> Lista_Variables INST_AS Tipo .

    SEMICOLON       reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    INST_END        reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    VAR_IDENTIFIER  reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    INST_READ       reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    INST_FOR        reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    INST_WHILE      reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    INST_IF         reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    INST_CASE       reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    INST_WRITE      reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    INST_WRITELN    reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    RTOI            reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    LENGTH          reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    TOP             reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    BOTTOM          reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)
    INST_BEGIN      reduce using rule 28 (Lista_Declare -> Lista_Variables INST_AS Tipo .)


state 140

    (33) Tipo -> TYPEDEF_RANGE .

    SEMICOLON       reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    INST_END        reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    VAR_IDENTIFIER  reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    INST_READ       reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    INST_FOR        reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    INST_WHILE      reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    INST_IF         reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    INST_CASE       reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    INST_WRITE      reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    INST_WRITELN    reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    RTOI            reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    LENGTH          reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    TOP             reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    BOTTOM          reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)
    INST_BEGIN      reduce using rule 33 (Tipo -> TYPEDEF_RANGE .)


state 141

    (32) Tipo -> TYPEDEF_BOOL .

    SEMICOLON       reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    INST_END        reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    VAR_IDENTIFIER  reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    INST_READ       reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    INST_FOR        reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    INST_WHILE      reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    INST_IF         reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    INST_CASE       reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    INST_WRITE      reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    INST_WRITELN    reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    RTOI            reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    LENGTH          reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    TOP             reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    BOTTOM          reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)
    INST_BEGIN      reduce using rule 32 (Tipo -> TYPEDEF_BOOL .)


state 142

    (27) Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .

    INST_END        reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    VAR_IDENTIFIER  reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    INST_READ       reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    INST_FOR        reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    INST_WHILE      reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    INST_IF         reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    INST_CASE       reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    INST_WRITE      reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    INST_WRITELN    reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    RTOI            reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    LENGTH          reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    TOP             reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    BOTTOM          reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)
    INST_BEGIN      reduce using rule 27 (Lista_DeclareTipos -> Lista_Declare SEMICOLON Lista_DeclareTipos .)


state 143

    (71) Inst_Case -> INST_CASE Operacion_binaria INST_OF Casos INST_END .

    SEMICOLON       reduce using rule 71 (Inst_Case -> INST_CASE Operacion_binaria INST_OF Casos INST_END .)
    INST_END        reduce using rule 71 (Inst_Case -> INST_CASE Operacion_binaria INST_OF Casos INST_END .)
    $end            reduce using rule 71 (Inst_Case -> INST_CASE Operacion_binaria INST_OF Casos INST_END .)
    INST_ELSE       reduce using rule 71 (Inst_Case -> INST_CASE Operacion_binaria INST_OF Casos INST_END .)


state 144

    (72) Casos -> VAR_IDENTIFIER CASE_ASSIGN . Bloque_Control SEMICOLON
    (74) Casos -> VAR_IDENTIFIER CASE_ASSIGN . Bloque_Control SEMICOLON Casos
    (67) Bloque_Control -> . Inst
    (68) Bloque_Control -> . Bloque_Inst
    (8) Inst -> . Inst_Asignacion
    (9) Inst -> . Inst_Lectura
    (10) Inst -> . Inst_For
    (11) Inst -> . Inst_While
    (12) Inst -> . Inst_If
    (13) Inst -> . Inst_Case
    (14) Inst -> . Inst_Salida
    (15) Inst -> . Inst_Funcion
    (16) Inst -> . Bloque_Inst
    (3) Bloque_Inst -> . INST_BEGIN Lista_Inst INST_END
    (4) Bloque_Inst -> . INST_BEGIN Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> . INST_BEGIN Inst_Declare INST_END
    (34) Inst_Asignacion -> . VAR_IDENTIFIER EQUAL Expresion
    (60) Inst_Lectura -> . INST_READ VAR_IDENTIFIER
    (76) Inst_For -> . INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
    (77) Inst_While -> . INST_WHILE Expresion INST_DO Bloque_Inst
    (78) Inst_While -> . INST_WHILE Expresion INST_DO Inst
    (69) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control
    (70) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (71) Inst_Case -> . INST_CASE Operacion_binaria INST_OF Casos INST_END
    (61) Inst_Salida -> . INST_WRITE Lista_Aux
    (62) Inst_Salida -> . INST_WRITELN Lista_Aux
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    INST_BEGIN      shift and go to state 10
    VAR_IDENTIFIER  shift and go to state 16
    INST_READ       shift and go to state 9
    INST_FOR        shift and go to state 19
    INST_WHILE      shift and go to state 8
    INST_IF         shift and go to state 20
    INST_CASE       shift and go to state 18
    INST_WRITE      shift and go to state 4
    INST_WRITELN    shift and go to state 21
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Bloque_Control                 shift and go to state 148
    Inst_Salida                    shift and go to state 7
    Inst_Funcion                   shift and go to state 3
    Bloque_Inst                    shift and go to state 130
    Inst_If                        shift and go to state 17
    Inst_For                       shift and go to state 12
    Inst_While                     shift and go to state 14
    Inst                           shift and go to state 132
    Inst_Asignacion                shift and go to state 24
    Inst_Case                      shift and go to state 25
    Inst_Lectura                   shift and go to state 15

state 145

    (73) Casos -> Operacion_binaria CASE_ASSIGN . Bloque_Control SEMICOLON
    (75) Casos -> Operacion_binaria CASE_ASSIGN . Bloque_Control SEMICOLON Casos
    (67) Bloque_Control -> . Inst
    (68) Bloque_Control -> . Bloque_Inst
    (8) Inst -> . Inst_Asignacion
    (9) Inst -> . Inst_Lectura
    (10) Inst -> . Inst_For
    (11) Inst -> . Inst_While
    (12) Inst -> . Inst_If
    (13) Inst -> . Inst_Case
    (14) Inst -> . Inst_Salida
    (15) Inst -> . Inst_Funcion
    (16) Inst -> . Bloque_Inst
    (3) Bloque_Inst -> . INST_BEGIN Lista_Inst INST_END
    (4) Bloque_Inst -> . INST_BEGIN Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> . INST_BEGIN Inst_Declare INST_END
    (34) Inst_Asignacion -> . VAR_IDENTIFIER EQUAL Expresion
    (60) Inst_Lectura -> . INST_READ VAR_IDENTIFIER
    (76) Inst_For -> . INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
    (77) Inst_While -> . INST_WHILE Expresion INST_DO Bloque_Inst
    (78) Inst_While -> . INST_WHILE Expresion INST_DO Inst
    (69) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control
    (70) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (71) Inst_Case -> . INST_CASE Operacion_binaria INST_OF Casos INST_END
    (61) Inst_Salida -> . INST_WRITE Lista_Aux
    (62) Inst_Salida -> . INST_WRITELN Lista_Aux
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    INST_BEGIN      shift and go to state 10
    VAR_IDENTIFIER  shift and go to state 16
    INST_READ       shift and go to state 9
    INST_FOR        shift and go to state 19
    INST_WHILE      shift and go to state 8
    INST_IF         shift and go to state 20
    INST_CASE       shift and go to state 18
    INST_WRITE      shift and go to state 4
    INST_WRITELN    shift and go to state 21
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Bloque_Control                 shift and go to state 149
    Inst_Salida                    shift and go to state 7
    Inst_Funcion                   shift and go to state 3
    Bloque_Inst                    shift and go to state 130
    Inst_If                        shift and go to state 17
    Inst_For                       shift and go to state 12
    Inst_While                     shift and go to state 14
    Inst                           shift and go to state 132
    Inst_Asignacion                shift and go to state 24
    Inst_Case                      shift and go to state 25
    Inst_Lectura                   shift and go to state 15

state 146

    (76) Inst_For -> INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO . Bloque_Control
    (67) Bloque_Control -> . Inst
    (68) Bloque_Control -> . Bloque_Inst
    (8) Inst -> . Inst_Asignacion
    (9) Inst -> . Inst_Lectura
    (10) Inst -> . Inst_For
    (11) Inst -> . Inst_While
    (12) Inst -> . Inst_If
    (13) Inst -> . Inst_Case
    (14) Inst -> . Inst_Salida
    (15) Inst -> . Inst_Funcion
    (16) Inst -> . Bloque_Inst
    (3) Bloque_Inst -> . INST_BEGIN Lista_Inst INST_END
    (4) Bloque_Inst -> . INST_BEGIN Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> . INST_BEGIN Inst_Declare INST_END
    (34) Inst_Asignacion -> . VAR_IDENTIFIER EQUAL Expresion
    (60) Inst_Lectura -> . INST_READ VAR_IDENTIFIER
    (76) Inst_For -> . INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
    (77) Inst_While -> . INST_WHILE Expresion INST_DO Bloque_Inst
    (78) Inst_While -> . INST_WHILE Expresion INST_DO Inst
    (69) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control
    (70) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (71) Inst_Case -> . INST_CASE Operacion_binaria INST_OF Casos INST_END
    (61) Inst_Salida -> . INST_WRITE Lista_Aux
    (62) Inst_Salida -> . INST_WRITELN Lista_Aux
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    INST_BEGIN      shift and go to state 10
    VAR_IDENTIFIER  shift and go to state 16
    INST_READ       shift and go to state 9
    INST_FOR        shift and go to state 19
    INST_WHILE      shift and go to state 8
    INST_IF         shift and go to state 20
    INST_CASE       shift and go to state 18
    INST_WRITE      shift and go to state 4
    INST_WRITELN    shift and go to state 21
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Bloque_Control                 shift and go to state 150
    Inst_Salida                    shift and go to state 7
    Inst_Funcion                   shift and go to state 3
    Bloque_Inst                    shift and go to state 130
    Inst_If                        shift and go to state 17
    Inst_For                       shift and go to state 12
    Inst_While                     shift and go to state 14
    Inst                           shift and go to state 132
    Inst_Asignacion                shift and go to state 24
    Inst_Case                      shift and go to state 25
    Inst_Lectura                   shift and go to state 15

state 147

    (70) Inst_If -> INST_IF Expresion INST_THEN Bloque_Control INST_ELSE . Bloque_Control
    (67) Bloque_Control -> . Inst
    (68) Bloque_Control -> . Bloque_Inst
    (8) Inst -> . Inst_Asignacion
    (9) Inst -> . Inst_Lectura
    (10) Inst -> . Inst_For
    (11) Inst -> . Inst_While
    (12) Inst -> . Inst_If
    (13) Inst -> . Inst_Case
    (14) Inst -> . Inst_Salida
    (15) Inst -> . Inst_Funcion
    (16) Inst -> . Bloque_Inst
    (3) Bloque_Inst -> . INST_BEGIN Lista_Inst INST_END
    (4) Bloque_Inst -> . INST_BEGIN Inst_Declare Lista_Inst INST_END
    (5) Bloque_Inst -> . INST_BEGIN Inst_Declare INST_END
    (34) Inst_Asignacion -> . VAR_IDENTIFIER EQUAL Expresion
    (60) Inst_Lectura -> . INST_READ VAR_IDENTIFIER
    (76) Inst_For -> . INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control
    (77) Inst_While -> . INST_WHILE Expresion INST_DO Bloque_Inst
    (78) Inst_While -> . INST_WHILE Expresion INST_DO Inst
    (69) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control
    (70) Inst_If -> . INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control
    (71) Inst_Case -> . INST_CASE Operacion_binaria INST_OF Casos INST_END
    (61) Inst_Salida -> . INST_WRITE Lista_Aux
    (62) Inst_Salida -> . INST_WRITELN Lista_Aux
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    INST_BEGIN      shift and go to state 10
    VAR_IDENTIFIER  shift and go to state 16
    INST_READ       shift and go to state 9
    INST_FOR        shift and go to state 19
    INST_WHILE      shift and go to state 8
    INST_IF         shift and go to state 20
    INST_CASE       shift and go to state 18
    INST_WRITE      shift and go to state 4
    INST_WRITELN    shift and go to state 21
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Bloque_Control                 shift and go to state 151
    Inst_Funcion                   shift and go to state 3
    Bloque_Inst                    shift and go to state 130
    Inst_If                        shift and go to state 17
    Inst_Salida                    shift and go to state 7
    Inst_For                       shift and go to state 12
    Inst_While                     shift and go to state 14
    Inst                           shift and go to state 132
    Inst_Asignacion                shift and go to state 24
    Inst_Case                      shift and go to state 25
    Inst_Lectura                   shift and go to state 15

state 148

    (72) Casos -> VAR_IDENTIFIER CASE_ASSIGN Bloque_Control . SEMICOLON
    (74) Casos -> VAR_IDENTIFIER CASE_ASSIGN Bloque_Control . SEMICOLON Casos

    SEMICOLON       shift and go to state 152


state 149

    (73) Casos -> Operacion_binaria CASE_ASSIGN Bloque_Control . SEMICOLON
    (75) Casos -> Operacion_binaria CASE_ASSIGN Bloque_Control . SEMICOLON Casos

    SEMICOLON       shift and go to state 153


state 150

    (76) Inst_For -> INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control .

    $end            reduce using rule 76 (Inst_For -> INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control .)
    SEMICOLON       reduce using rule 76 (Inst_For -> INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control .)
    INST_END        reduce using rule 76 (Inst_For -> INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control .)
    INST_ELSE       reduce using rule 76 (Inst_For -> INST_FOR VAR_IDENTIFIER INST_IN Operacion_binaria INST_DO Bloque_Control .)


state 151

    (70) Inst_If -> INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control .

    SEMICOLON       reduce using rule 70 (Inst_If -> INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control .)
    INST_END        reduce using rule 70 (Inst_If -> INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control .)
    $end            reduce using rule 70 (Inst_If -> INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control .)
    INST_ELSE       reduce using rule 70 (Inst_If -> INST_IF Expresion INST_THEN Bloque_Control INST_ELSE Bloque_Control .)


state 152

    (72) Casos -> VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON .
    (74) Casos -> VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON . Casos
    (72) Casos -> . VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON
    (73) Casos -> . Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON
    (74) Casos -> . VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON Casos
    (75) Casos -> . Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON Casos
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    INST_END        reduce using rule 72 (Casos -> VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON .)
    VAR_IDENTIFIER  shift and go to state 127
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 128
    Casos                          shift and go to state 154
    Inst_Funcion                   shift and go to state 26

state 153

    (73) Casos -> Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON .
    (75) Casos -> Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON . Casos
    (72) Casos -> . VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON
    (73) Casos -> . Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON
    (74) Casos -> . VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON Casos
    (75) Casos -> . Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON Casos
    (36) Operacion_binaria -> . Operacion_binaria PLUS Operacion_binaria
    (37) Operacion_binaria -> . Operacion_binaria MINUS Operacion_binaria
    (38) Operacion_binaria -> . Operacion_binaria TIMES Operacion_binaria
    (39) Operacion_binaria -> . Operacion_binaria DIVIDE Operacion_binaria
    (40) Operacion_binaria -> . Operacion_binaria MOD Operacion_binaria
    (41) Operacion_binaria -> . Operacion_binaria AND Operacion_binaria
    (42) Operacion_binaria -> . Operacion_binaria OR Operacion_binaria
    (43) Operacion_binaria -> . Operacion_binaria EQEQ Operacion_binaria
    (44) Operacion_binaria -> . Operacion_binaria NEQEQ Operacion_binaria
    (45) Operacion_binaria -> . Operacion_binaria GREAT Operacion_binaria
    (46) Operacion_binaria -> . Operacion_binaria GREATEQ Operacion_binaria
    (47) Operacion_binaria -> . Operacion_binaria LESS Operacion_binaria
    (48) Operacion_binaria -> . Operacion_binaria LESSEQ Operacion_binaria
    (49) Operacion_binaria -> . Operacion_binaria IN Operacion_binaria
    (50) Operacion_binaria -> . NOT Operacion_binaria
    (51) Operacion_binaria -> . NUMBER
    (52) Operacion_binaria -> . VAR_IDENTIFIER
    (53) Operacion_binaria -> . LPAREN Operacion_binaria RPAREN
    (54) Operacion_binaria -> . Inst_Funcion
    (55) Operacion_binaria -> . MINUS Operacion_binaria
    (56) Operacion_binaria -> . TRUE
    (57) Operacion_binaria -> . FALSE
    (58) Operacion_binaria -> . Operacion_binaria RANGE Operacion_binaria
    (59) Operacion_binaria -> . Operacion_binaria INTERSECTION Operacion_binaria
    (17) Inst_Funcion -> . RTOI LPAREN Operacion_binaria RPAREN
    (18) Inst_Funcion -> . LENGTH LPAREN Operacion_binaria RPAREN
    (19) Inst_Funcion -> . TOP LPAREN Operacion_binaria RPAREN
    (20) Inst_Funcion -> . BOTTOM LPAREN Operacion_binaria RPAREN
    (21) Inst_Funcion -> . RTOI LPAREN VAR_IDENTIFIER RPAREN
    (22) Inst_Funcion -> . LENGTH LPAREN VAR_IDENTIFIER RPAREN
    (23) Inst_Funcion -> . TOP LPAREN VAR_IDENTIFIER RPAREN
    (24) Inst_Funcion -> . BOTTOM LPAREN VAR_IDENTIFIER RPAREN

    INST_END        reduce using rule 73 (Casos -> Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON .)
    VAR_IDENTIFIER  shift and go to state 127
    NOT             shift and go to state 37
    NUMBER          shift and go to state 27
    LPAREN          shift and go to state 34
    MINUS           shift and go to state 30
    TRUE            shift and go to state 29
    FALSE           shift and go to state 36
    RTOI            shift and go to state 23
    LENGTH          shift and go to state 22
    TOP             shift and go to state 5
    BOTTOM          shift and go to state 11

    Operacion_binaria              shift and go to state 128
    Casos                          shift and go to state 155
    Inst_Funcion                   shift and go to state 26

state 154

    (74) Casos -> VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON Casos .

    INST_END        reduce using rule 74 (Casos -> VAR_IDENTIFIER CASE_ASSIGN Bloque_Control SEMICOLON Casos .)


state 155

    (75) Casos -> Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON Casos .

    INST_END        reduce using rule 75 (Casos -> Operacion_binaria CASE_ASSIGN Bloque_Control SEMICOLON Casos .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 75 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 86 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 92 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 94 resolved as shift
WARNING: shift/reduce conflict for CASE_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for INST_ELSE in state 131 resolved as shift
WARNING: reduce/reduce conflict in state 6 resolved using rule (program -> INST_PROGRAM Bloque_Inst)
WARNING: rejected rule (Inst -> Bloque_Inst) in state 6
WARNING: reduce/reduce conflict in state 117 resolved using rule (Inst -> Bloque_Inst)
WARNING: rejected rule (Inst_While -> INST_WHILE Expresion INST_DO Bloque_Inst) in state 117
WARNING: reduce/reduce conflict in state 130 resolved using rule (Inst -> Bloque_Inst)
WARNING: rejected rule (Bloque_Control -> Bloque_Inst) in state 130
WARNING: Rule (Inst_While -> INST_WHILE Expresion INST_DO Bloque_Inst) is never reduced
WARNING: Rule (Bloque_Control -> Bloque_Inst) is never reduced
